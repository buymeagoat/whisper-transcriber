name: nightly-performance

on:
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:

jobs:
  load-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@11bd719d720b5b0c9d4b7b0e5a89538ba1f3f5d

      - name: Set up Python
        uses: actions/setup-python@5d5c6b2de18ef1b8d508fe5b6a9cfb5c1fba9c38
        with:
          python-version: '3.11'

      - name: Install Python requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare runtime environment
        run: |
          cat <<'ENV' > .env
          SECRET_KEY=$(python - <<'PY'\nimport secrets\nprint(secrets.token_hex(32))\nPY)
          JWT_SECRET_KEY=$(python - <<'PY'\nimport secrets\nprint(secrets.token_hex(32))\nPY)
          REDIS_PASSWORD=nightlyredis
          ADMIN_BOOTSTRAP_PASSWORD=Admin123!pass
          ADMIN_METRICS_TOKEN=nightly-metrics-token
          DATABASE_URL=sqlite:///app/data/app.db
          ENVIRONMENT=production
          LOG_LEVEL=INFO
          WHISPER_MODEL_DIR=/app/models
          ENV

      - name: Start application stack
        run: |
          docker compose up -d --build redis app worker
          docker compose ps

      - name: Wait for health endpoint
        run: |
          for i in {1..30}; do
            if curl -fsS http://localhost:8001/health >/tmp/health.json; then
              cat /tmp/health.json
              exit 0
            fi
            sleep 10
          done
          echo "API failed to become healthy" >&2
          docker compose logs app
          exit 1

      - name: Install k6
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends gpg ca-certificates
          sudo gpg -k >/dev/null 2>&1 || true
          curl -fsSL https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends k6

      - name: Run transcription workload
        run: |
          k6 run \
            --summary-export perf/results/latest.json \
            --vus 8 \
            --duration 2m \
            perf/transcription_scenario.js
        env:
          BASE_URL: http://localhost:8001
          WHISPER_MODEL: tiny

      - name: Compare against baseline
        run: python perf/assert_perf.py perf/results/latest.json

      - name: Upload performance artifacts
        if: always()
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4
        with:
          name: nightly-perf-results
          path: |
            perf/results/latest.json
            docker-compose.yml
            .env

      - name: Tear down stack
        if: always()
        run: docker compose down
