# T031: Production Deployment and Monitoring - CI/CD Pipeline Configuration

name: Production Deployment Pipeline
on:
  push:
    branches: [main, production]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Code formatting check
        run: |
          black --check --diff .
          isort --check-only --diff .

      - name: Linting
        run: |
          flake8 .
          pylint api/ --fail-under=8.0

      - name: Type checking
        run: mypy api/

      - name: Security scanning
        run: |
          bandit -r api/ -f json -o security-report.json
          safety check

      - name: Dependency vulnerability scan
        run: pip-audit

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.json

  # Job 2: Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_whisper_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set up test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_whisper_db" >> .env.test
          echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
          echo "TESTING=true" >> .env.test

      - name: Run database migrations
        run: |
          export $(cat .env.test | xargs)
          alembic upgrade head

      - name: Run unit tests
        run: |
          export $(cat .env.test | xargs)
          pytest tests/ -v --cov=api --cov-report=xml --cov-report=html --junitxml=test-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            test-results.xml
            htmlcov/
            coverage.xml

      - name: Upload coverage to Codecov
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Job 3: Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run unit tests
        run: npm run test:unit -- --reporter=junit --outputFile=test-results.xml

      - name: Run build test
        run: npm run build

      - name: Upload frontend test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: frontend/test-results.xml

  # Job 4: Build and Push Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, test, frontend-test]
    if: always() && (needs.code-quality.result == 'success')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # Job 5: Security Scanning
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 6: Load Testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: whisper_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: whisper_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install load testing dependencies
        run: |
          pip install locust requests

      - name: Start application container
        run: |
          docker run -d \
            --name whisper-app \
            --network host \
            -e DATABASE_URL=postgresql://whisper_user:test_password@localhost:5432/whisper_db \
            -e REDIS_URL=redis://localhost:6379/0 \
            -e ENVIRONMENT=testing \
            ${{ needs.build.outputs.image-tag }}

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run load tests
        run: |
          cd tests/load_testing
          ./run_load_test.sh --type light --headless --format json
          
      - name: Upload load test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: test-results/load-testing/

      - name: Stop application container
        if: always()
        run: docker stop whisper-app || true

  # Job 7: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to staging
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster whisper-staging \
            --service whisper-transcriber \
            --task-definition whisper-transcriber:${{ github.run_number }} \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster whisper-staging \
            --services whisper-transcriber

      - name: Run smoke tests
        run: |
          # Basic health check
          curl -f https://staging.whisper-transcriber.com/health
          
          # Run critical path tests
          python scripts/smoke_tests.py --host https://staging.whisper-transcriber.com

  # Job 8: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, load-test]
    if: github.ref_type == 'tag' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create deployment backup
        run: |
          # Backup current task definition
          aws ecs describe-task-definition \
            --task-definition whisper-transcriber \
            --query 'taskDefinition' > backup-task-def.json

      - name: Deploy to production
        id: deploy
        run: |
          # Blue-green deployment strategy
          scripts/production/deploy-enhanced.sh \
            --image ${{ needs.build.outputs.image-tag }} \
            --environment production \
            --strategy blue-green

      - name: Run post-deployment tests
        run: |
          # Comprehensive health checks
          python scripts/post_deployment_tests.py --host https://whisper-transcriber.com

      - name: Update monitoring alerts
        run: |
          # Update alert thresholds based on load test results
          python scripts/update_alerts.py --environment production

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🚀 Production deployment successful!
            Version: ${{ github.ref_name }}
            Image: ${{ needs.build.outputs.image-tag }}
            Commit: ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          aws ecs update-service \
            --cluster whisper-production \
            --service whisper-transcriber \
            --task-definition $(jq -r '.family + ":" + (.revision | tostring)' backup-task-def.json)

  # Job 9: Post-Deployment Monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: Wait for system stabilization
        run: sleep 300  # 5 minutes

      - name: Check system health
        run: |
          # Monitor key metrics for 10 minutes
          python scripts/health_monitor.py \
            --duration 600 \
            --environment production \
            --alert-on-degradation

      - name: Generate deployment report
        run: |
          python scripts/generate_deployment_report.py \
            --version ${{ github.ref_name }} \
            --commit ${{ github.sha }} \
            --deployment-time ${{ github.event.head_commit.timestamp }}

      - name: Update documentation
        run: |
          # Auto-update deployment docs
          python scripts/update_deployment_docs.py \
            --version ${{ github.ref_name }}

# Workflow completion notification
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment]
    if: always()
    
    steps:
      - name: Deployment status notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: |
            Pipeline completed for ${{ github.ref_name }}
            Production: ${{ needs.deploy-production.result }}
            Monitoring: ${{ needs.post-deployment.result }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}