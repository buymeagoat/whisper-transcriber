#!/bin/bash

# REAL USER EXPERIENCE TEST
# Tests exactly what happens when a user opens the application

echo "üåê REAL USER EXPERIENCE TEST"
echo "============================"
echo "Testing: What happens when a user opens http://localhost:8000 in their browser?"
echo ""

# Step 1: Load the main page
echo "üë§ User Action: Opening http://localhost:8000..."
MAIN_PAGE=$(curl -s http://localhost:8000/)

# Step 2: Extract and load all resources the browser would load
echo "üîÑ Browser Action: Loading all page resources..."

# Get CSS files
CSS_FILES=$(echo "$MAIN_PAGE" | grep -o '<link[^>]*href="[^"]*\.css[^"]*"' | grep -o 'href="[^"]*"' | sed 's/href="//g' | sed 's/"//g' || echo "")
if [ -n "$CSS_FILES" ]; then
    for css_file in $CSS_FILES; do
        echo "  Loading CSS: $css_file"
        CSS_RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null "http://localhost:8000$css_file")
        if [ "$CSS_RESPONSE" != "200" ]; then
            echo "  ‚ùå CSS failed to load: $css_file (HTTP $CSS_RESPONSE)"
        else
            echo "  ‚úÖ CSS loaded: $css_file"
        fi
    done
else
    echo "  ‚ÑπÔ∏è  No external CSS files found"
fi

# Get JavaScript files
JS_FILES=$(echo "$MAIN_PAGE" | grep -o '<script[^>]*src="[^"]*"' | grep -o 'src="[^"]*"' | sed 's/src="//g' | sed 's/"//g' || echo "")
if [ -n "$JS_FILES" ]; then
    for js_file in $JS_FILES; do
        echo "  Loading JS: $js_file"
        JS_RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null "http://localhost:8000$js_file")
        if [ "$JS_RESPONSE" != "200" ]; then
            echo "  ‚ùå JavaScript failed to load: $js_file (HTTP $JS_RESPONSE)"
        else
            echo "  ‚úÖ JavaScript loaded: $js_file"
            
            # Check for obvious runtime errors in the JS content
            JS_CONTENT=$(curl -s "http://localhost:8000$js_file" | head -c 2000)
            if echo "$JS_CONTENT" | grep -q "ReferenceError\|SyntaxError\|TypeError.*initialization"; then
                echo "  ‚ö†Ô∏è  JavaScript contains error patterns: $js_file"
            fi
        fi
    done
else
    echo "  ‚ùå No JavaScript files found - React app will not work"
fi

echo ""
echo "üéØ USER EXPERIENCE SIMULATION"
echo "============================"

# Test key user flows that would happen immediately on page load
echo "Testing immediate user experience..."

# Test 1: Can user see the app interface?
echo "1. Interface Visibility Test:"
if echo "$MAIN_PAGE" | grep -q 'id="root"'; then
    echo "   ‚úÖ React app container present"
    
    # Check if there's any initial content or loading state
    if echo "$MAIN_PAGE" | grep -q "loading\|Loading\|spinner\|Spinner"; then
        echo "   ‚úÖ Loading state visible to user"
    elif echo "$MAIN_PAGE" | grep -q -E "(Welcome|Dashboard|Transcrib|Login|Register)"; then
        echo "   ‚úÖ Content visible in initial HTML"
    else
        echo "   ‚ö†Ô∏è  No obvious content or loading state - user may see blank page"
    fi
else
    echo "   ‚ùå React app container missing - user will see blank page"
fi

# Test 2: Can user interact with authentication?
echo "2. Authentication Accessibility Test:"
AUTH_ENDPOINTS=("/register" "/auth/login" "/token")
AUTH_WORKING=0
for endpoint in "${AUTH_ENDPOINTS[@]}"; do
    TEST_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000$endpoint")
    if [ "$TEST_RESPONSE" = "200" ] || [ "$TEST_RESPONSE" = "405" ]; then
        echo "   ‚úÖ Auth endpoint accessible: $endpoint"
        AUTH_WORKING=$((AUTH_WORKING + 1))
    else
        echo "   ‚ö†Ô∏è  Auth endpoint issue: $endpoint (HTTP $TEST_RESPONSE)"
    fi
done

if [ "$AUTH_WORKING" -gt 0 ]; then
    echo "   ‚úÖ User can potentially authenticate ($AUTH_WORKING/3 endpoints working)"
else
    echo "   ‚ùå User cannot authenticate - all auth endpoints broken"
fi

# Test 3: Can user access core functionality?
echo "3. Core Functionality Test:"
JOBS_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:8000/jobs/")
if [ "$JOBS_RESPONSE" = "401" ]; then
    echo "   ‚úÖ Jobs endpoint requires authentication (expected)"
elif [ "$JOBS_RESPONSE" = "200" ]; then
    echo "   ‚úÖ Jobs endpoint accessible"
else
    echo "   ‚ö†Ô∏è  Jobs endpoint unexpected response: HTTP $JOBS_RESPONSE"
fi

echo ""
echo "üì± MOBILE/RESPONSIVE TEST"
echo "========================"

# Test responsive meta tags
if echo "$MAIN_PAGE" | grep -q 'name="viewport"'; then
    VIEWPORT=$(echo "$MAIN_PAGE" | grep -o 'name="viewport"[^>]*content="[^"]*"' | grep -o 'content="[^"]*"' | sed 's/content="//g' | sed 's/"//g')
    echo "‚úÖ Responsive viewport tag found: $VIEWPORT"
else
    echo "‚ö†Ô∏è  No responsive viewport tag - poor mobile experience"
fi

# Test for mobile-specific CSS
if [ -n "$CSS_FILES" ]; then
    MOBILE_CSS_FOUND=0
    for css_file in $CSS_FILES; do
        CSS_CONTENT=$(curl -s "http://localhost:8000$css_file" | head -c 1000)
        if echo "$CSS_CONTENT" | grep -q "@media.*max-width\|@media.*min-width\|mobile\|tablet"; then
            MOBILE_CSS_FOUND=1
            break
        fi
    done
    
    if [ "$MOBILE_CSS_FOUND" = "1" ]; then
        echo "‚úÖ Mobile-responsive CSS detected"
    else
        echo "‚ö†Ô∏è  No obvious mobile CSS - may not work on mobile"
    fi
fi

echo ""
echo "üìã REAL USER EXPERIENCE ASSESSMENT"
echo "=================================="

# Count actual issues that would affect users
CRITICAL_ISSUES=0
MINOR_ISSUES=0

# Check for critical issues
if ! echo "$MAIN_PAGE" | grep -q 'id="root"'; then
    CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
fi

if [ -z "$JS_FILES" ]; then
    CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
fi

if [ "$AUTH_WORKING" -eq 0 ]; then
    CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
fi

# Check for minor issues
if ! echo "$MAIN_PAGE" | grep -q 'name="viewport"'; then
    MINOR_ISSUES=$((MINOR_ISSUES + 1))
fi

echo "Critical Issues Found: $CRITICAL_ISSUES"
echo "Minor Issues Found: $MINOR_ISSUES"

if [ "$CRITICAL_ISSUES" -eq 0 ]; then
    if [ "$MINOR_ISSUES" -eq 0 ]; then
        echo ""
        echo "üéâ EXCELLENT USER EXPERIENCE"
        echo "‚úÖ Application is ready for real users"
        echo "‚úÖ All critical functionality accessible"
        echo "‚úÖ No blocking issues found"
    else
        echo ""
        echo "‚úÖ GOOD USER EXPERIENCE"
        echo "‚úÖ Application works for users"
        echo "‚ö†Ô∏è  Minor improvements could enhance experience"
    fi
else
    echo ""
    echo "‚ùå POOR USER EXPERIENCE"
    echo "‚õî Users will encounter significant issues"
    echo "üö® Critical problems need immediate attention"
fi