# Streamlined Whisper Transcriber Dockerfile
# Multi-stage build for optimized production image

# Stage 1: Build frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app/web
COPY web/package*.json ./
RUN npm ci --only=production

COPY web/ ./
RUN npm run build

# Stage 2: Python backend with Whisper
FROM python:3.11-slim AS backend

# Install system dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg \
    libmagic1 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd --create-home --shell /bin/bash app
WORKDIR /app

# Install Python dependencies
COPY app/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY app/ ./app/
COPY --from=frontend-builder /app/web/dist ./web/dist/

# Create directories
RUN mkdir -p storage/uploads storage/transcripts data models \
    && chown -R app:app /app

# Copy startup script
COPY <<EOF /app/start.sh
#!/bin/bash
set -e

# Initialize database
python -c "
from app.main import Base, engine
Base.metadata.create_all(bind=engine)
print('Database initialized')
"

# Start application
if [ "\$1" = "worker" ]; then
    exec celery -A app.worker worker --loglevel=info --concurrency=1
else
    exec uvicorn app.main:app --host 0.0.0.0 --port 8000
fi
EOF

RUN chmod +x /app/start.sh

USER app
EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/ || exit 1

CMD ["/app/start.sh"]
