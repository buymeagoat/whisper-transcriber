patch_20250729_015800_UTC.log
=====TASK=====
Normalize legacy patch log to standard template

=====OBJECTIVE=====
Convert old log to new format for archival

=====CONSTRAINTS=====
- Original log lacked structured metadata

=====SCOPE=====
docs/patch_logs/

=====DIFFSUMMARY=====
N/A (legacy log)

=====TIMESTAMP=====
2025-07-29T01:58:00Z

=====BUILDER_DATE_TIME (UTC)=====
20250801 163602

=====PROMPTID=====
normalize-patchlogs-utc-001

=====AGENTVERSION=====
Unknown

=====AGENTHASH=====
N/A

=====PROMPTHASH=====
4ecae15b69c10bb9ded2dcc63c68c4ee3d91e11fdf7b46e3066c7575110f8493

=====COMMITHASH=====
TBD

=====SPEC_HASHES=====
6bfaa5a80ab85a494b5e35d9cc68b1ec039d330a4386e8ac011f130556dbb7a1

=====SNAPSHOT=====
Attempted: scripts/CPG_repo_audit.py (missing). Using git metadata.

=====TESTRESULTS=====
Not executed; docker missing.

=====DIAGNOSTICMETA=====
{"info": "legacy conversion"}

=====DECISIONS=====
- Converted legacy log to template

=====ORIGINAL LOG=====
==========Prompt
=====TASK=====
Remove all legacy build scripts and references from the codebase. `whisper_build.sh` must be the exclusive and authoritative build entrypoint.

=====CONSTRAINTS=====
- Delete the following scripts entirely:
  - `docker_build.sh`
  - `prestage_dependencies.sh`
  - `run_build.sh` (if present)
- Remove any invocation or sourcing of these scripts from:
  - `shared_checks.sh`
  - Any remaining helper scripts
- Remove documentation mentions of these deprecated scripts:
  - `scripts_reference.md`
  - `TROUBLESHOOTING.md`
  - `index.md`
  - Any README or quickstart docs
- Ensure `whisper_build.sh` is clearly documented as the sole entrypoint
- Update `CHANGELOG.md` with a new entry for legacy script removal:
  - Include filenames removed
  - Justification for consolidation
  - Date of change

=====OBJECTIVE=====
Complete the consolidation process by removing all deprecated build scripts and references. Prevent user confusion by ensuring `whisper_build.sh` is the only supported method going forward.

=====SCOPE=====
- File system (delete legacy scripts)
- All docs and internal script references
- CHANGELOG.md

=====OUTPUT FORMAT=====
- ✅ Patch that deletes legacy scripts
- ✅ Updated docs with clean references to `whisper_build.sh`
- ✅ New CHANGELOG.md entry with details of script removal
- ✅ Inline `# Codex:` markers for key changes
- ✅ Confirmation message in `whisper_build.sh` for users upgrading from old scripts

👉 Use **Ask Codex** to run this patch.


======CODEX Response
Summary

The README now clarifies that Docker builds must use scripts/whisper_build.sh, marking removal of the older helpers

CHANGELOG lists the removal of docker_build.sh and prestage_dependencies.sh, establishing whisper_build.sh as the sole build entrypoint

The design scope document reflects the streamlined script usage, showing only start_containers.sh and update_images.sh as wrappers

Log reference cleanup removes references to prestage_dependencies.log, aligning documentation with the new build workflow

whisper_build.sh prints a notice about legacy scripts being removed, guiding users to the updated process

Testing

✅ black . --check

❌ scripts/run_tests.sh (failed to run due to missing Docker)

Codex couldn't run certain commands due to environment limitations. Consider configuring a setup script or internet access in your Codex environment to install dependencies.


Files (8)

README.md
+2
-0

docs/CHANGELOG.md
+8
-0

docs/design_scope.md
+1
-1

docs/log_reference.md
+0
-10

docs/scripts_reference.md
+0
-1

scripts/docker_build.sh
Deleted

scripts/prestage_dependencies.sh
Deleted

scripts/whisper_build.sh
+2
-0

README.md
+2
-0

# Whisper Transcriber
# Whisper Transcriber


> **For architecture, Docker build details and script internals, see [docs/design_scope.md](docs/design_scope.md).**
> **For architecture, Docker build details and script internals, see [docs/design_scope.md](docs/design_scope.md).**


Self-hosted transcription service with a FastAPI backend and a React frontend. It wraps the OpenAI Whisper CLI so you can upload audio, monitor progress and retrieve transcripts.
Self-hosted transcription service with a FastAPI backend and a React frontend. It wraps the OpenAI Whisper CLI so you can upload audio, monitor progress and retrieve transcripts.


All Docker builds now use `scripts/whisper_build.sh`. Previous helper scripts were removed.<!-- # Codex: build entrypoint clarified -->

For a step-by-step setup guide, see [docs/help.md](docs/help.md).
For a step-by-step setup guide, see [docs/help.md](docs/help.md).


## Requirements & Installation
## Requirements & Installation


For prerequisites and installation steps, follow the instructions in
For prerequisites and installation steps, follow the instructions in
[docs/help.md](docs/help.md). The guide covers Python and system
[docs/help.md](docs/help.md). The guide covers Python and system
dependencies as well as optional Docker usage. Node.js 18 is required to build
dependencies as well as optional Docker usage. Node.js 18 is required to build
the frontend.
the frontend.
## Optional Environment Variables
## Optional Environment Variables


`api/settings.py` reads the following environment variables at startup. `SECRET_KEY` has no default and must be set. When using Docker Compose, variables in a `.env` file at the project root are automatically loaded. Create this file by copying `.env.example` and replacing the placeholder with a unique value.
`api/settings.py` reads the following environment variables at startup. `SECRET_KEY` has no default and must be set. When using Docker Compose, variables in a `.env` file at the project root are automatically loaded. Create this file by copying `.env.example` and replacing the placeholder with a unique value.


- `DB_URL` – SQLAlchemy connection string for the required PostgreSQL database in the form
- `DB_URL` – SQLAlchemy connection string for the required PostgreSQL database in the form
  `postgresql+psycopg2://user:password@host:port/database`. The default
  `postgresql+psycopg2://user:password@host:port/database`. The default
  `postgresql+psycopg2://whisper:whisper@db:5432/whisper` works with
  `postgresql+psycopg2://whisper:whisper@db:5432/whisper` works with
  `docker-compose.yml` because it references the `db` service. Override it for
  `docker-compose.yml` because it references the `db` service. Override it for
  a local instance, for example
  a local instance, for example
  `DB_URL=postgresql+psycopg2://postgres:postgres@localhost:5432/whisper`.
  `DB_URL=postgresql+psycopg2://postgres:postgres@localhost:5432/whisper`.
- `VITE_API_HOST` – base URL used by the frontend to reach the API. Leave blank to use the site's origin and set a URL when the API is hosted remotely.
- `VITE_API_HOST` – base URL used by the frontend to reach the API. Leave blank to use the site's origin and set a URL when the API is hosted remotely.
- `PORT` – TCP port used by the Uvicorn server (defaults to `8000`).
- `PORT` – TCP port used by the Uvicorn server (defaults to `8000`).
- `VITE_DEFAULT_TRANSCRIPT_FORMAT` – default download format used by the web UI (defaults to `txt`).
- `VITE_DEFAULT_TRANSCRIPT_FORMAT` – default download format used by the web UI (defaults to `txt`).
- `LOG_LEVEL` – logging level for job/system logs (`DEBUG` by default).
- `LOG_LEVEL` – logging level for job/system logs (`DEBUG` by default).
- `LOG_FORMAT` – set to `json` for structured logs or `plain` for text (defaults
- `LOG_FORMAT` – set to `json` for structured logs or `plain` for text (defaults
  to `plain`).
  to `plain`).
- `LOG_TO_STDOUT` – set to `true` to also mirror logs to the console.
- `LOG_TO_STDOUT` – set to `true` to also mirror logs to the console.
docs/CHANGELOG.md
+8
-0

# Changelog
# Changelog


All notable changes to this project will be documented in this file.
All notable changes to this project will be documented in this file.
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/)
The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).


## [1.0.2] - 2025-08-15
### Removed
- Legacy scripts `docker_build.sh` and `prestage_dependencies.sh` in favour of `whisper_build.sh`.
### Changed
- Documentation references updated to designate `whisper_build.sh` as the sole build entrypoint.
### Rationale
- Consolidates build logic into a single script to reduce confusion and maintenance burden.

## [1.0.1] - 2025-08-06
## [1.0.1] - 2025-08-06
### Changed
### Changed
- Consolidated build commands into `whisper_build.sh` and updated documentation.
- Consolidated build commands into `whisper_build.sh` and updated documentation.
### Added
### Added
- `[build-system]` reference and troubleshooting guidance for each build flag.
- `[build-system]` reference and troubleshooting guidance for each build flag.
### Rationale
### Rationale
- Provides a single entrypoint for building and ensures future patches record changes here.
- Provides a single entrypoint for building and ensures future patches record changes here.


## [1.0.0] - 2025-07-28
## [1.0.0] - 2025-07-28
### Added
### Added
- Build helper scripts with offline support and environment validation
- Build helper scripts with offline support and environment validation
- Security enhancements for secret handling and authentication
- Security enhancements for secret handling and authentication


### Changed
### Changed
- Documentation updates for external users and troubleshooting
- Documentation updates for external users and troubleshooting
- Improved Docker build reliability
- Improved Docker build reliability


### Fixed
### Fixed
- Various script errors and dependency checks
- Various script errors and dependency checks


## [0.6.0] - 2025-07-20
## [0.6.0] - 2025-07-20
### Added
### Added
- Start and build scripts for Docker images
- Start and build scripts for Docker images
- Diagnostics for container health and image caching
- Diagnostics for container health and image caching
- Option to verify or stage dependencies before builds
- Option to verify or stage dependencies before builds
docs/design_scope.md
+1
-1

@@ -7,51 +7,51 @@ This repository implements a self‑contained audio transcription service. A Fas


## Documentation Policy
## Documentation Policy


All contributors—including Codex—must update this document and `README.md` whenever features or configuration change. Keeping both files synchronized ensures the instructions remain accurate.
All contributors—including Codex—must update this document and `README.md` whenever features or configuration change. Keeping both files synchronized ensures the instructions remain accurate.




## System Design
## System Design
- **FastAPI entry point**: `api/main.py` bootstraps the web app. It mounts static directories, sets up CORS, and defines all API endpoints.
- **FastAPI entry point**: `api/main.py` bootstraps the web app. It mounts static directories, sets up CORS, and defines all API endpoints.
- **Database layer**: SQLAlchemy ORM models are defined in `api/models.py` (`jobs` and `metadata` tables). `api/orm_bootstrap.py` runs Alembic migrations and validates the schema on startup.
- **Database layer**: SQLAlchemy ORM models are defined in `api/models.py` (`jobs` and `metadata` tables). `api/orm_bootstrap.py` runs Alembic migrations and validates the schema on startup.
## Job Processing Pipeline
## Job Processing Pipeline
  1. Audio is uploaded via `POST /jobs`. The server stores it under `uploads/` and creates a new `Job` record.
  1. Audio is uploaded via `POST /jobs`. The server stores it under `uploads/` and creates a new `Job` record.
  2. `handle_whisper` spawns the Whisper CLI to generate a `.srt` file under `transcripts/{job_id}`. The job status moves from `queued` → `processing`.
  2. `handle_whisper` spawns the Whisper CLI to generate a `.srt` file under `transcripts/{job_id}`. The job status moves from `queued` → `processing`.
  3. On success the transcript is enriched by `metadata_writer.py`, which creates a JSON metadata file and DB entry. Status becomes `completed`. Failures update the status accordingly and save logs under `logs/`.
  3. On success the transcript is enriched by `metadata_writer.py`, which creates a JSON metadata file and DB entry. Status becomes `completed`. Failures update the status accordingly and save logs under `logs/`.


## Important Directories
## Important Directories
- `uploads/` – user-uploaded audio files.
- `uploads/` – user-uploaded audio files.
- `transcripts/` – per‑job folders containing `.srt` results and metadata.
- `transcripts/` – per‑job folders containing `.srt` results and metadata.
- `logs/` – rotating log files for jobs and the system.
- `logs/` – rotating log files for jobs and the system.
- When `STORAGE_BACKEND=cloud` these directories serve as a local cache and
- When `STORAGE_BACKEND=cloud` these directories serve as a local cache and
  transcript files are synchronized from S3 when requested.
  transcript files are synchronized from S3 when requested.
 - `MODEL_DIR` specifies where the Whisper models are stored. By default this directory is `models/` which is local only and never committed. It must contain `base.pt`, `large-v3.pt`, `medium.pt`, `small.pt`, and `tiny.pt` when building the image. The application checks for these files on startup.
 - `MODEL_DIR` specifies where the Whisper models are stored. By default this directory is `models/` which is local only and never committed. It must contain `base.pt`, `large-v3.pt`, `medium.pt`, `small.pt`, and `tiny.pt` when building the image. The application checks for these files on startup.
- `frontend/` – React app built into `frontend/dist/` and copied by the Dockerfile
- `frontend/` – React app built into `frontend/dist/` and copied by the Dockerfile
  to `api/static/` for the UI.
  to `api/static/` for the UI.
- `scripts/` – helper utilities for Docker builds, testing and container management.
- `scripts/` – helper utilities for Docker builds, testing and container management.
  - `whisper_build.sh` – unified script that stages dependencies, builds Docker images and starts the compose stack. Pass `--offline` to rely solely on cached assets, `--purge-cache` to clear cached packages before downloading and `--verify-sources` to test remote mirrors. Output is saved to `logs/whisper_build.log`.
  - `whisper_build.sh` – unified script that stages dependencies, builds Docker images and starts the compose stack. Pass `--offline` to rely solely on cached assets, `--purge-cache` to clear cached packages before downloading and `--verify-sources` to test remote mirrors. Output is saved to `logs/whisper_build.log`.
  - `docker_build.sh`, `start_containers.sh`, `update_images.sh` and `prestage_dependencies.sh` – deprecated wrappers that now redirect to `whisper_build.sh`.
  - `start_containers.sh` and `update_images.sh` wrap `whisper_build.sh` to rebuild images and restart the stack.
- The build scripts store cached packages and Docker images under `/tmp/docker_cache`. Set `CACHE_DIR` to another location—for example `/mnt/c/whisper_cache`—if you need the cache to survive WSL resets. Use `whisper_build.sh --full` to refresh the cache and copy it elsewhere if desired.
- The build scripts store cached packages and Docker images under `/tmp/docker_cache`. Set `CACHE_DIR` to another location—for example `/mnt/c/whisper_cache`—if you need the cache to survive WSL resets. Use `whisper_build.sh --full` to refresh the cache and copy it elsewhere if desired.
- All build helpers automatically install or upgrade Node.js 18 using the NodeSource repository when needed.
- All build helpers automatically install or upgrade Node.js 18 using the NodeSource repository when needed.
- `run_backend_tests.sh` – runs backend tests and verifies the `/health` and `/version` endpoints, logging output to `logs/test.log`.
- `run_backend_tests.sh` – runs backend tests and verifies the `/health` and `/version` endpoints, logging output to `logs/test.log`.
- `diagnose_containers.sh` – checks that Docker is running, verifies cache directories, and prints container and build logs for troubleshooting.
- `diagnose_containers.sh` – checks that Docker is running, verifies cache directories, and prints container and build logs for troubleshooting.
 - `check_env.sh` – validates DNS resolution, ensures cached `.deb` packages
 - `check_env.sh` – validates DNS resolution, ensures cached `.deb` packages
   correspond to the base image and verifies that the base image digest stored
   correspond to the base image and verifies that the base image digest stored
   in `cache/manifest.txt` matches a freshly pulled copy. The script fails on a
   in `cache/manifest.txt` matches a freshly pulled copy. The script fails on a
   mismatch unless `ALLOW_DIGEST_MISMATCH=1` is set. Cached packages must match
   mismatch unless `ALLOW_DIGEST_MISMATCH=1` is set. Cached packages must match
   the Dockerfile base image to avoid build errors.
   the Dockerfile base image to avoid build errors.
 - `run_tests.sh` – preferred wrapper that runs backend, frontend and Cypress
 - `run_tests.sh` – preferred wrapper that runs backend, frontend and Cypress
  tests by default. Pass `--backend`, `--frontend` or `--cypress` to run a
  tests by default. Pass `--backend`, `--frontend` or `--cypress` to run a
  subset. Results are saved to `logs/full_test.log`.
  subset. Results are saved to `logs/full_test.log`.


Both `models/` and `frontend/dist/` are listed in `.gitignore`. Ensure the
Both `models/` and `frontend/dist/` are listed in `.gitignore`. Ensure the
Whisper models are present before running `docker build`. The precompiled
Whisper models are present before running `docker build`. The precompiled
frontend assets already live under `frontend/dist/`.
frontend assets already live under `frontend/dist/`.
Create a file containing your SECRET_KEY and pass it to BuildKit so the
Create a file containing your SECRET_KEY and pass it to BuildKit so the
validation step can load application settings. BuildKit secrets are the
validation step can load application settings. BuildKit secrets are the
preferred mechanism:
preferred mechanism:
```bash
```bash
docker build --secret id=secret_key,src=<file> -t whisper-app .
docker build --secret id=secret_key,src=<file> -t whisper-app .
```
```
If `docker build` does not support `--secret`, pass the key as a build
If `docker build` does not support `--secret`, pass the key as a build
argument instead:
argument instead:
```bash
```bash
docs/log_reference.md
+0
-10

# Log Reference
# Log Reference


This page lists the log files generated or used by Whisper Transcriber. Log paths are relative to the project root unless otherwise noted.
This page lists the log files generated or used by Whisper Transcriber. Log paths are relative to the project root unless otherwise noted.


## Build and Setup Logs
## Build and Setup Logs


### `logs/whisper_build.log`
### `logs/whisper_build.log`
- **Generated By:** `scripts/whisper_build.sh`
- **Generated By:** `scripts/whisper_build.sh`
- **Purpose:** Unified build output.
- **Purpose:** Unified build output.
- **Location:** `logs/whisper_build.log`
- **Location:** `logs/whisper_build.log`
- **Rotation/Retention:** Manual; overwritten on each run.
- **Rotation/Retention:** Manual; overwritten on each run.
- **Example:**
- **Example:**
  ```
  ```
  ===== STAGING =====
  ===== STAGING =====
  Building the production image...
  Building the production image...
  ```
  ```


### `logs/prestage_dependencies.log`
- **Generated By:** `scripts/prestage_dependencies.sh` *(wrapper for `whisper_build.sh`)*
- **Purpose:** Redirects to `whisper_build.sh`.
- **Location:** `logs/prestage_dependencies.log`
- **Rotation/Retention:** Manual; overwritten on each run.
- **Example:**
  ```
  ===== PYTHON =====
  Writing requirements.lock
  ```


### `logs/start_containers.log`
### `logs/start_containers.log`
- **Generated By:** `scripts/start_containers.sh` *(wrapper for `whisper_build.sh`)*
- **Generated By:** `scripts/start_containers.sh` *(wrapper for `whisper_build.sh`)*
- **Purpose:** Redirects to `whisper_build.sh`.
- **Purpose:** Redirects to `whisper_build.sh`.
- **Location:** `logs/start_containers.log`
- **Location:** `logs/start_containers.log`
- **Rotation/Retention:** Manual; overwritten on each run.
- **Rotation/Retention:** Manual; overwritten on each run.
- **Example:**
- **Example:**
  ```
  ```
  ===== STARTUP =====
  ===== STARTUP =====
  API service became healthy
  API service became healthy
  ```
  ```


### `logs/update_images.log`
### `logs/update_images.log`
- **Generated By:** `scripts/update_images.sh` *(wrapper for `whisper_build.sh`)*
- **Generated By:** `scripts/update_images.sh` *(wrapper for `whisper_build.sh`)*
- **Purpose:** Redirects to `whisper_build.sh`.
- **Purpose:** Redirects to `whisper_build.sh`.
- **Location:** `logs/update_images.log`
- **Location:** `logs/update_images.log`
- **Rotation/Retention:** Manual; overwritten on each run.
- **Rotation/Retention:** Manual; overwritten on each run.
- **Example:**
- **Example:**
  ```
  ```
  ===== VERIFICATION =====
  ===== VERIFICATION =====
  Checking whisper models...
  Checking whisper models...
  ```
  ```


## Test Logs
## Test Logs


docs/scripts_reference.md
+0
-1

# Scripts Reference
# Scripts Reference


👤 Target Audience: Developers
👤 Target Audience: Developers


The table below summarizes the helper scripts found under `/scripts`.
The table below summarizes the helper scripts found under `/scripts`.


| Script | Description | Flags / Env Vars | Example | Notes |
| Script | Description | Flags / Env Vars | Example | Notes |
| --- | --- | --- | --- | --- |
| --- | --- | --- | --- | --- |
| `check_env.sh` | Verifies host tools and base image versions before builds | `ALLOW_OS_MISMATCH`, `ALLOW_DIGEST_MISMATCH` | `scripts/check_env.sh` | Fails if required cache files or Docker are missing |
| `check_env.sh` | Verifies host tools and base image versions before builds | `ALLOW_OS_MISMATCH`, `ALLOW_DIGEST_MISMATCH` | `scripts/check_env.sh` | Fails if required cache files or Docker are missing |
| `diagnose_containers.sh` | Prints container status and recent logs for troubleshooting | `LOG_LINES` | `scripts/diagnose_containers.sh` | Useful when containers fail to start |
| `diagnose_containers.sh` | Prints container status and recent logs for troubleshooting | `LOG_LINES` | `scripts/diagnose_containers.sh` | Useful when containers fail to start |
| `check_cache_env.sh` | Displays how CACHE_DIR resolves on the current host | `CI` | `scripts/check_cache_env.sh` | Helps verify WSL overrides |
| `check_cache_env.sh` | Displays how CACHE_DIR resolves on the current host | `CI` | `scripts/check_cache_env.sh` | Helps verify WSL overrides |
| `docker-entrypoint.sh` | Entry script used inside containers to start the API or worker | `SERVICE_TYPE`, `BROKER_PING_TIMEOUT` | Invoked automatically by Docker | Creates log under `/app/logs/entrypoint.log` |
| `docker-entrypoint.sh` | Entry script used inside containers to start the API or worker | `SERVICE_TYPE`, `BROKER_PING_TIMEOUT` | Invoked automatically by Docker | Creates log under `/app/logs/entrypoint.log` |
| `whisper_build.sh` | Unified build and startup script | `--full` `--offline` `--purge-cache` `--verify-sources` | `sudo scripts/whisper_build.sh` | Logs to `logs/whisper_build.log`; sets `CACHE_DIR` automatically under WSL |
| `whisper_build.sh` | Unified build and startup script | `--full` `--offline` `--purge-cache` `--verify-sources` | `sudo scripts/whisper_build.sh` | Logs to `logs/whisper_build.log`; sets `CACHE_DIR` automatically under WSL |
| `docker_build.sh` | Deprecated wrapper for `whisper_build.sh` | N/A | `scripts/docker_build.sh` | Redirects to new script |
| `healthcheck.sh` | Container health probe used by Docker | `SERVICE_TYPE`, `VITE_API_HOST` | Invoked by Docker healthcheck | Exits non-zero when API or worker is unhealthy |
| `healthcheck.sh` | Container health probe used by Docker | `SERVICE_TYPE`, `VITE_API_HOST` | Invoked by Docker healthcheck | Exits non-zero when API or worker is unhealthy |
| `run_backend_tests.sh` | Runs Python unit tests inside the API container | `VITE_API_HOST` | `scripts/run_backend_tests.sh` | Requires Docker Compose stack to be running |
| `run_backend_tests.sh` | Runs Python unit tests inside the API container | `VITE_API_HOST` | `scripts/run_backend_tests.sh` | Requires Docker Compose stack to be running |
| `run_tests.sh` | Executes backend tests, frontend unit tests and Cypress e2e tests | `--backend` `--frontend` `--cypress` | `scripts/run_tests.sh --backend` | Logs saved to `logs/full_test.log` |
| `run_tests.sh` | Executes backend tests, frontend unit tests and Cypress e2e tests | `--backend` `--frontend` `--cypress` | `scripts/run_tests.sh --backend` | Logs saved to `logs/full_test.log` |
| `server_entry.py` | Python entry point for local development | `PORT` | `python scripts/server_entry.py` | Starts Uvicorn with settings from `.env` |
| `server_entry.py` | Python entry point for local development | `PORT` | `python scripts/server_entry.py` | Starts Uvicorn with settings from `.env` |
| `shared_checks.sh` | Library of common functions used by other scripts | N/A | Sourced by other scripts | Not executed directly |
| `shared_checks.sh` | Library of common functions used by other scripts | N/A | Sourced by other scripts | Not executed directly |
| `start_containers.sh` | Deprecated wrapper for `whisper_build.sh` | N/A | `scripts/start_containers.sh` | Redirects to new script |
| `start_containers.sh` | Deprecated wrapper for `whisper_build.sh` | N/A | `scripts/start_containers.sh` | Redirects to new script |
| `update_images.sh` | Deprecated wrapper for `whisper_build.sh` | N/A | `scripts/update_images.sh` | Redirects to new script |
| `update_images.sh` | Deprecated wrapper for `whisper_build.sh` | N/A | `scripts/update_images.sh` | Redirects to new script |
| `validate_manifest.sh` | Checks the cache manifest against local Docker images | `--summary` `--json` | `scripts/validate_manifest.sh --summary` | Detects mismatches between cached and installed versions |
| `validate_manifest.sh` | Checks the cache manifest against local Docker images | `--summary` `--json` | `scripts/validate_manifest.sh --summary` | Detects mismatches between cached and installed versions |


## Environment-Sensitive Cache Pathing
## Environment-Sensitive Cache Pathing


Most build scripts rely on a common cache directory. By default `CACHE_DIR`
Most build scripts rely on a common cache directory. By default `CACHE_DIR`
is `/tmp/docker_cache`. When the host is WSL, the scripts automatically
is `/tmp/docker_cache`. When the host is WSL, the scripts automatically
override this path to `/mnt/wsl/shared/docker_cache` and print a warning.
override this path to `/mnt/wsl/shared/docker_cache` and print a warning.
Setting `CACHE_DIR` manually is ignored under WSL so the cache always resides
Setting `CACHE_DIR` manually is ignored under WSL so the cache always resides
in the shared location.<!-- # Codex-verified: CACHE_DIR documentation matches set_cache_dir -->
in the shared location.<!-- # Codex-verified: CACHE_DIR documentation matches set_cache_dir -->


scripts/docker_build.sh
Deleted
+0
-5

scripts/prestage_dependencies.sh
Deleted
+0
-5

scripts/whisper_build.sh
+2
-0

#!/usr/bin/env bash
#!/usr/bin/env bash
set -euo pipefail
set -euo pipefail


# Codex: unified build entrypoint
# Codex: unified build entrypoint


echo "[NOTICE] Legacy build helpers removed. Use this script directly." >&2  # Codex:

if [[ $EUID -ne 0 ]]; then
if [[ $EUID -ne 0 ]]; then
    echo "Run with sudo to download apt packages" >&2
    echo "Run with sudo to download apt packages" >&2
    exit 1
    exit 1
fi
fi


SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
source "$SCRIPT_DIR/shared_checks.sh"
source "$SCRIPT_DIR/shared_checks.sh"
set_cache_dir  # Codex: cache override for WSL hosts
set_cache_dir  # Codex: cache override for WSL hosts
"$SCRIPT_DIR/check_env.sh"
"$SCRIPT_DIR/check_env.sh"


LOG_DIR="$ROOT_DIR/logs"
LOG_DIR="$ROOT_DIR/logs"
LOG_FILE="$LOG_DIR/whisper_build.log"
LOG_FILE="$LOG_DIR/whisper_build.log"
mkdir -p "$LOG_DIR"
mkdir -p "$LOG_DIR"
exec > >(tee -a "$LOG_FILE") 2>&1
exec > >(tee -a "$LOG_FILE") 2>&1


secret_file_runtime="$ROOT_DIR/secret_key.txt"
secret_file_runtime="$ROOT_DIR/secret_key.txt"
secret_file=""
secret_file=""


cleanup() {
cleanup() {
    rm -f "$secret_file_runtime"
    rm -f "$secret_file_runtime"
    if [ -n "${secret_file:-}" ]; then
    if [ -n "${secret_file:-}" ]; then
        rm -rf "$secret_file"
        rm -rf "$secret_file"
    fi
    fi
}
}
