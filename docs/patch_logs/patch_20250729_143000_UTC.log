patch_20250729_143000_UTC.log
=====TASK=====
Normalize legacy patch log to standard template

=====OBJECTIVE=====
Convert old log to new format for archival

=====CONSTRAINTS=====
- Original log lacked structured metadata

=====SCOPE=====
docs/patch_logs/

=====DIFFSUMMARY=====
N/A (legacy log)

=====TIMESTAMP=====
2025-07-29T14:30:00Z

=====BUILDER_DATE_TIME (UTC)=====
20250801 163602

=====PROMPTID=====
normalize-patchlogs-utc-001

=====AGENTVERSION=====
Unknown

=====AGENTHASH=====
N/A

=====PROMPTHASH=====
4ecae15b69c10bb9ded2dcc63c68c4ee3d91e11fdf7b46e3066c7575110f8493

=====COMMITHASH=====
TBD

=====SPEC_HASHES=====
6bfaa5a80ab85a494b5e35d9cc68b1ec039d330a4386e8ac011f130556dbb7a1

=====SNAPSHOT=====
Attempted: scripts/CPG_repo_audit.py (missing). Using git metadata.

=====TESTRESULTS=====
Not executed; docker missing.

=====DIAGNOSTICMETA=====
{"info": "legacy conversion"}

=====DECISIONS=====
- Converted legacy log to template

=====ORIGINAL LOG=====
====PROMPT
=====TASK=====
Remove the unused `usage()` function from `whisper_build.sh`, since `print_help()` has replaced its functionality.

=====CONSTRAINTS=====
- Search `whisper_build.sh` for the `usage()` function
- Confirm it is not referenced anywhere in the script
- Remove the function definition and any related dead code
- Leave `print_help()` as the sole help handler
- Add a `# Codex:` marker for this removal for traceability
- No changes required to documentation or CHANGELOG

=====OBJECTIVE=====
Eliminate redundant code to keep the build script clean, maintainable, and aligned with the current help system.

=====SCOPE=====
- scripts/whisper_build.sh

=====OUTPUT FORMAT=====
- ✅ Clean diff with the unused `usage()` function removed
- ✅ Codex marker added

👉 Use **Ask Codex** to apply this patch.


====Codex Reponse

Summary

Removed the obsolete usage() function in favor of print_help, leaving a Codex marker for traceability

Testing

❌ scripts/run_tests.sh (failed to run because “docker” was not found)

✅ black .

Network access
Some requests were blocked due to network access restrictions. Consider granting access in environment settings.

docker command attempts were blocked during testing.


File (1)

scripts/whisper_build.sh
+3
-6

scripts/whisper_build.sh
+3
-6

@@ -35,80 +35,77 @@ SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
source "$SCRIPT_DIR/shared_checks.sh"
source "$SCRIPT_DIR/shared_checks.sh"
set_cache_dir  # Codex: cache override for WSL hosts
set_cache_dir  # Codex: cache override for WSL hosts
"$SCRIPT_DIR/check_env.sh"
"$SCRIPT_DIR/check_env.sh"


LOG_DIR="$ROOT_DIR/logs"
LOG_DIR="$ROOT_DIR/logs"
LOG_FILE="$LOG_DIR/whisper_build.log"
LOG_FILE="$LOG_DIR/whisper_build.log"
mkdir -p "$LOG_DIR"
mkdir -p "$LOG_DIR"
exec > >(tee -a "$LOG_FILE") 2>&1
exec > >(tee -a "$LOG_FILE") 2>&1


secret_file_runtime="$ROOT_DIR/secret_key.txt"
secret_file_runtime="$ROOT_DIR/secret_key.txt"
secret_file=""
secret_file=""


cleanup() {
cleanup() {
    rm -f "$secret_file_runtime"
    rm -f "$secret_file_runtime"
    if [ -n "${secret_file:-}" ]; then
    if [ -n "${secret_file:-}" ]; then
        rm -rf "$secret_file"
        rm -rf "$secret_file"
    fi
    fi
}
}
trap 'echo "[ERROR] whisper_build.sh failed near line $LINENO. Check $LOG_FILE for details." >&2; cleanup' ERR
trap 'echo "[ERROR] whisper_build.sh failed near line $LINENO. Check $LOG_FILE for details." >&2; cleanup' ERR
trap cleanup EXIT
trap cleanup EXIT


MODE="full"
MODE="full"
PURGE_CACHE=false
PURGE_CACHE=false
VERIFY_SOURCES=false
VERIFY_SOURCES=false

# Codex: removed legacy usage() helper
usage() {
    print_help
}


while [[ $# -gt 0 ]]; do
while [[ $# -gt 0 ]]; do
    case "$1" in
    case "$1" in
        --full)
        --full)
            MODE="full"
            MODE="full"
            shift
            shift
            ;;
            ;;
        --offline)
        --offline)
            MODE="offline"
            MODE="offline"
            shift
            shift
            ;;
            ;;
        --purge-cache)
        --purge-cache)
            PURGE_CACHE=true
            PURGE_CACHE=true
            shift
            shift
            ;;
            ;;
        --verify-sources)
        --verify-sources)
            VERIFY_SOURCES=true
            VERIFY_SOURCES=true
            shift
            shift
            ;;
            ;;
        -h|--help)
        -h|--help)
            usage
            print_help
            exit 0
            exit 0
            ;;
            ;;
        *)
        *)
            echo "Unknown option: $1" >&2
            echo "Unknown option: $1" >&2
            usage >&2
            print_help >&2
            exit 1
            exit 1
            ;;
            ;;
    esac
    esac
    shift
    shift
done
done


log_step() { echo "===== $1 ====="; }
log_step() { echo "===== $1 ====="; }


check_download_sources() {
check_download_sources() {
    check_internet && check_docker_registry && check_apt_sources
    check_internet && check_docker_registry && check_apt_sources
}
}


verify_cache_integrity() {
verify_cache_integrity() {
    check_cache_dirs
    check_cache_dirs
    verify_offline_assets
    verify_offline_assets
}
}


download_dependencies() {
download_dependencies() {
    if $PURGE_CACHE; then
    if $PURGE_CACHE; then
        echo "Purging cache at $CACHE_DIR" >&2
        echo "Purging cache at $CACHE_DIR" >&2
        rm -rf "$CACHE_DIR"
        rm -rf "$CACHE_DIR"
    fi
    fi
    install_node18
    install_node18
    check_docker_running
    check_docker_running
    stage_build_dependencies
    stage_build_dependencies
