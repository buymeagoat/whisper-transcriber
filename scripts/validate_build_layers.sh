#!/bin/bash

# BUILD LAYER VALIDATION SCRIPT
# Ensures all layers are properly fixed before deployment

set -e

echo "üîß SYSTEMATIC BUILD LAYER VALIDATION"
echo "===================================="
echo "Validates: Source ‚Üí Build ‚Üí Docker ‚Üí Runtime ‚Üí Application"
echo ""

VALIDATION_FAILED=0

# LAYER 1: Source Code Validation
echo "üìù LAYER 1: Source Code Validation"
echo "--------------------------------"

if [ -f "frontend/vite.config.js" ]; then
    if grep -q "manualChunks: () => 'vendor'" frontend/vite.config.js; then
        echo "‚úÖ Vite config correctly forces single bundle"
    else
        echo "‚ùå Vite config does not force single bundle"
        VALIDATION_FAILED=1
    fi
else
    echo "‚ùå Vite config file missing"
    VALIDATION_FAILED=1
fi

# Check for known problematic imports
if grep -r "Batch.*@mui/icons-material" frontend/src/ 2>/dev/null; then
    echo "‚ùå Found problematic Batch icon import"
    VALIDATION_FAILED=1
else
    echo "‚úÖ No problematic MUI imports found"
fi

# LAYER 2: Build Process Validation
echo ""
echo "üèóÔ∏è  LAYER 2: Build Process Validation"
echo "-----------------------------------"

cd frontend
if npm run build >/dev/null 2>&1; then
    echo "‚úÖ Frontend builds successfully"
    
    # Count JavaScript bundles
    JS_COUNT=$(find dist/assets -name "*.js" | wc -l)
    if [ "$JS_COUNT" -eq 1 ]; then
        echo "‚úÖ Build produces exactly 1 JavaScript bundle"
    else
        echo "‚ùå Build produces $JS_COUNT JavaScript bundles (expected 1)"
        VALIDATION_FAILED=1
    fi
    
    # Check bundle size (should be substantial)
    BUNDLE_SIZE=$(find dist/assets -name "*.js" -exec wc -c {} \; | cut -d' ' -f1)
    if [ "$BUNDLE_SIZE" -gt 1000000 ]; then
        echo "‚úÖ Bundle size reasonable ($BUNDLE_SIZE bytes)"
    else
        echo "‚ö†Ô∏è Bundle size small ($BUNDLE_SIZE bytes) - may be missing dependencies"
    fi
else
    echo "‚ùå Frontend build failed"
    VALIDATION_FAILED=1
fi
cd ..

# LAYER 3: Docker Build Validation
echo ""
echo "üê≥ LAYER 3: Docker Build Validation"
echo "---------------------------------"

# Check if fixed image exists and use it, otherwise build validation test
if docker image inspect whisper-transcriber-app:fixed >/dev/null 2>&1; then
    echo "‚úÖ Using existing fixed image for validation"
    STATIC_FILES=$(docker run --rm whisper-transcriber-app:fixed find /app -name "*.js" | grep assets | wc -l)
    if [ "$STATIC_FILES" -eq 1 ]; then
        echo "‚úÖ Docker image contains exactly 1 JavaScript bundle"
    else
        echo "‚ùå Docker image contains $STATIC_FILES JavaScript bundles (expected 1)"
        VALIDATION_FAILED=1
    fi
elif docker build -t whisper-transcriber-app:validation-test . >/dev/null 2>&1; then
    echo "‚úÖ Docker image builds successfully"
    
    # Check static files in image
    STATIC_FILES=$(docker run --rm whisper-transcriber-app:validation-test find /app/api/static/assets/ -name "*.js" 2>/dev/null | wc -l)
    if [ "$STATIC_FILES" -eq 1 ]; then
        echo "‚úÖ Docker image contains exactly 1 JavaScript bundle"
    else
        echo "‚ùå Docker image contains $STATIC_FILES JavaScript bundles (expected 1)"
        VALIDATION_FAILED=1
    fi
    
    # Cleanup test image
    docker rmi whisper-transcriber-app:validation-test >/dev/null 2>&1 || true
else
    echo "‚ùå Docker build failed"
    VALIDATION_FAILED=1
fi

# LAYER 4: Runtime Validation
echo ""
echo "üöÄ LAYER 4: Runtime Validation"
echo "----------------------------"

if docker ps | grep -q "whisper-app"; then
    echo "‚úÖ Application container is running"
    
    # Check health endpoint
    if curl -s -f http://localhost:8000/health >/dev/null 2>&1; then
        echo "‚úÖ Application responds to health checks"
    else
        echo "‚ùå Application not responding to health checks"
        VALIDATION_FAILED=1
    fi
    
    # Check bundle serving
    SERVED_BUNDLES=$(curl -s http://localhost:8000/ | grep -o '/assets/[^"]*\.js' | wc -l)
    if [ "$SERVED_BUNDLES" -eq 1 ]; then
        echo "‚úÖ Application serves exactly 1 JavaScript bundle"
    else
        echo "‚ùå Application serves $SERVED_BUNDLES JavaScript bundles (expected 1)"
        VALIDATION_FAILED=1
    fi
else
    echo "‚ö†Ô∏è Application container not running - cannot validate runtime"
fi

# LAYER 5: JavaScript Validation
echo ""
echo "üîç LAYER 5: JavaScript Error Validation"
echo "--------------------------------------"

if curl -s -f http://localhost:8000/health >/dev/null 2>&1; then
    BUNDLE_URL=$(curl -s http://localhost:8000/ | grep -o '/assets/[^"]*\.js' | head -1)
    if [ -n "$BUNDLE_URL" ]; then
        INIT_ERRORS=$(curl -s "http://localhost:8000$BUNDLE_URL" | grep -o "Cannot access '[^']*' before initialization" | wc -l)
        if [ "$INIT_ERRORS" -eq 0 ]; then
            echo "‚úÖ No JavaScript initialization errors found"
        else
            echo "‚ùå Found $INIT_ERRORS JavaScript initialization errors"
            VALIDATION_FAILED=1
        fi
        
        # Check for syntax errors in JavaScript
        BUNDLE_SAMPLE=$(curl -s "http://localhost:8000$BUNDLE_URL" | head -c 1000)
        if echo "$BUNDLE_SAMPLE" | grep -q "SyntaxError\|Unexpected token\|Uncaught"; then
            SYNTAX_ERROR_COUNT=$(echo "$BUNDLE_SAMPLE" | grep -c "SyntaxError\|Unexpected token\|Uncaught")
            echo "‚ùå Found JavaScript syntax errors in bundle"
            VALIDATION_FAILED=1
        else
            echo "‚úÖ No JavaScript syntax errors found"
        fi
    else
        echo "‚ùå Could not find bundle URL to validate"
        VALIDATION_FAILED=1
    fi
else
    echo "‚ö†Ô∏è Application not accessible - cannot validate JavaScript"
fi

# Final Result
echo ""
echo "üìä VALIDATION SUMMARY"
echo "===================="

if [ "$VALIDATION_FAILED" -eq 0 ]; then
    echo "üéâ ALL LAYERS VALIDATED SUCCESSFULLY"
    echo "‚úÖ Source code is correct"
    echo "‚úÖ Build process produces single bundle"
    echo "‚úÖ Docker image contains correct assets"
    echo "‚úÖ Runtime serves application properly"
    echo "‚úÖ JavaScript bundle has no critical errors"
    echo ""
    echo "üöÄ DEPLOYMENT READY"
    echo "The application is ready for production deployment."
    exit 0
else
    echo "‚ùå VALIDATION FAILED"
    echo "One or more layers have issues that must be resolved."
    echo ""
    echo "üõ†Ô∏è REQUIRED ACTIONS:"
    echo "1. Fix the failing validation checks above"
    echo "2. Re-run this validation script"
    echo "3. Do not deploy until all validations pass"
    exit 1
fi