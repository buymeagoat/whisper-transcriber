{
  "assessment_date": "2025-10-21T10:03:38.324787",
  "security_rating": "CRITICAL RISK",
  "risk_score": 1780,
  "total_findings": 337,
  "severity_breakdown": {
    "CRITICAL": 3,
    "HIGH": 7,
    "MEDIUM": 327,
    "LOW": 0,
    "INFO": 0
  },
  "categories": [
    "SQL Injection",
    "Authentication",
    "File Upload",
    "Log Injection",
    "Configuration"
  ],
  "findings_by_category": {
    "SQL Injection": [
      {
        "severity": "CRITICAL",
        "category": "SQL Injection",
        "title": "Potential SQL injection vulnerability",
        "description": "Unsafe SQL query construction detected: r'\\.format\\s*\\(.*\\).*execute',  # .format() with execute",
        "file_path": "temp/security_assessment.py",
        "line_number": 63,
        "recommendation": "Use parameterized queries or ORM methods instead of string formatting",
        "timestamp": "2025-10-21T10:03:36.862488"
      },
      {
        "severity": "CRITICAL",
        "category": "SQL Injection",
        "title": "Potential SQL injection vulnerability",
        "description": "Unsafe SQL query construction detected: session.execute(text(f\"SELECT {session_num * 5 + i}\"))",
        "file_path": "tests/test_database_optimization.py",
        "line_number": 462,
        "recommendation": "Use parameterized queries or ORM methods instead of string formatting",
        "timestamp": "2025-10-21T10:03:36.911634"
      },
      {
        "severity": "HIGH",
        "category": "SQL Injection",
        "title": "Raw SQL query with potential user input",
        "description": "Raw SQL query may be vulnerable: conn.execute(\"PRAGMA synchronous=NORMAL\")      # Balance safety and performance",
        "file_path": "app/backup/database.py",
        "line_number": 82,
        "recommendation": "Review and ensure proper parameterization",
        "timestamp": "2025-10-21T10:03:36.987905"
      },
      {
        "severity": "CRITICAL",
        "category": "SQL Injection",
        "title": "Potential SQL injection vulnerability",
        "description": "Unsafe SQL query construction detected: result = conn.execute(f\"SELECT COUNT(*) FROM {table}\").fetchone()",
        "file_path": "app/backup/database.py",
        "line_number": 405,
        "recommendation": "Use parameterized queries or ORM methods instead of string formatting",
        "timestamp": "2025-10-21T10:03:36.990515"
      }
    ],
    "Authentication": [
      {
        "severity": "HIGH",
        "category": "Authentication",
        "title": "Hardcoded secret detected",
        "description": "Potential hardcoded secret: user = User(username=\"benchmark_user\", hashed_password=\"hash\", role=\"user\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 333,
        "recommendation": "Move secrets to environment variables or secure configuration",
        "timestamp": "2025-10-21T10:03:37.375062"
      },
      {
        "severity": "HIGH",
        "category": "Authentication",
        "title": "Hardcoded secret detected",
        "description": "Potential hardcoded secret: hashed_password=\"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",  # secret",
        "file_path": "scripts/create_test_user.py",
        "line_number": 33,
        "recommendation": "Move secrets to environment variables or secure configuration",
        "timestamp": "2025-10-21T10:03:37.381498"
      },
      {
        "severity": "HIGH",
        "category": "Authentication",
        "title": "Hardcoded secret detected",
        "description": "Potential hardcoded secret: database_operations=[\"INSERT/UPDATE user_settings WHERE user_id=? AND key='default_model'\"],",
        "file_path": "scripts/dev/full_stack_function_mapper.py",
        "line_number": 223,
        "recommendation": "Move secrets to environment variables or secure configuration",
        "timestamp": "2025-10-21T10:03:37.404052"
      },
      {
        "severity": "MEDIUM",
        "category": "Authentication",
        "title": "JWT without expiration",
        "description": "JWT token may not have expiration set: encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "file_path": "app/main.py",
        "line_number": 397,
        "recommendation": "Always set JWT expiration time",
        "timestamp": "2025-10-21T10:03:37.422118"
      },
      {
        "severity": "HIGH",
        "category": "Authentication",
        "title": "Weak password hashing",
        "description": "Weak hashing algorithm for passwords: return hashlib.sha256(password.encode()).hexdigest()",
        "file_path": "api/services/users.py",
        "line_number": 16,
        "recommendation": "Use bcrypt, scrypt, or Argon2 for password hashing",
        "timestamp": "2025-10-21T10:03:37.608205"
      },
      {
        "severity": "HIGH",
        "category": "Authentication",
        "title": "Weak password hashing",
        "description": "Weak hashing algorithm for passwords: \"\"\"Hash a password using SHA256.\"\"\"",
        "file_path": "api/routes/auth.py",
        "line_number": 57,
        "recommendation": "Use bcrypt, scrypt, or Argon2 for password hashing",
        "timestamp": "2025-10-21T10:03:37.636945"
      },
      {
        "severity": "HIGH",
        "category": "Authentication",
        "title": "Weak password hashing",
        "description": "Weak hashing algorithm for passwords: return hashlib.sha256(password.encode()).hexdigest()",
        "file_path": "api/routes/auth.py",
        "line_number": 58,
        "recommendation": "Use bcrypt, scrypt, or Argon2 for password hashing",
        "timestamp": "2025-10-21T10:03:37.637072"
      },
      {
        "severity": "MEDIUM",
        "category": "Authentication",
        "title": "JWT without expiration",
        "description": "JWT token may not have expiration set: encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "file_path": "api/routes/auth.py",
        "line_number": 72,
        "recommendation": "Always set JWT expiration time",
        "timestamp": "2025-10-21T10:03:37.637303"
      }
    ],
    "File Upload": [
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: if 'open(' in line and any(mode in line for mode in ['w', 'a', 'x']):",
        "file_path": "temp/security_assessment.py",
        "line_number": 217,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.823606"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
        "file_path": "temp/security_assessment.py",
        "line_number": 619,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.824459"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open('/tmp/cache_test_results.json', 'w') as f:",
        "file_path": "temp/test_cache_performance.py",
        "line_number": 261,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.825322"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(temp_file.name, 'wb') as f:",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 72,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.825722"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, 'rb') as f:",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 93,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.825926"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: async with aiofiles.open(file_path, 'rb') as f:",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 252,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.826267"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: async with aiofiles.open(file_path, 'rb') as f:",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 438,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.826682"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 552,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.827010"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(temp_file.name, 'wb') as f:",
        "file_path": "temp/chunked_upload_benchmark.py",
        "line_number": 72,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.827503"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
        "file_path": "temp/chunked_upload_benchmark.py",
        "line_number": 529,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.828536"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "temp/chunked_upload_benchmark.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.828934"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(temp_test_file, 'r') as original, open(decompressed_file.name, 'r') as decompressed:",
        "file_path": "tests/test_backup_system.py",
        "line_number": 251,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.829607"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(temp_test_file, 'r') as original, open(download_file.name, 'r') as downloaded:",
        "file_path": "tests/test_backup_system.py",
        "line_number": 301,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.829785"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "tests/test_backup_system.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.830626"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(chunk_file, \"rb\") as f:",
        "file_path": "tests/test_chunked_upload_system.py",
        "line_number": 334,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.831500"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(meta_file, \"r\") as f:",
        "file_path": "tests/test_chunked_upload_system.py",
        "line_number": 339,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.831681"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(chunk_file, \"wb\") as f:",
        "file_path": "tests/test_chunked_upload_system.py",
        "line_number": 385,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.831859"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(output_path, \"rb\") as f:",
        "file_path": "tests/test_chunked_upload_system.py",
        "line_number": 401,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.832036"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(chunk_file_0, \"wb\") as f:",
        "file_path": "tests/test_chunked_upload_system.py",
        "line_number": 435,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.832244"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(chunk_file_2, \"wb\") as f:",
        "file_path": "tests/test_chunked_upload_system.py",
        "line_number": 437,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.832394"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "tests/test_chunked_upload_system.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.833391"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.compose_file) as f:",
        "file_path": "tests/test_container_security_008.py",
        "line_number": 31,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.835281"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "tests/test_backup_validation.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.844692"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "tests/test_backup_validation.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.845123"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.846300"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(apt_path) as f:",
        "file_path": "scripts/update_manifest.py",
        "line_number": 55,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.846892"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(MANIFEST_PATH, 'a') as mf:",
        "file_path": "scripts/update_manifest.py",
        "line_number": 58,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.847016"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(dockerfile_path) as df:",
        "file_path": "scripts/update_manifest.py",
        "line_number": 64,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.847058"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(pip_versions_path, 'w') as pf:",
        "file_path": "scripts/update_manifest.py",
        "line_number": 102,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.847157"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(pip_versions_path, 'rb') as pf:",
        "file_path": "scripts/update_manifest.py",
        "line_number": 109,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.847197"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(npm_versions_path, 'rb') as nf:",
        "file_path": "scripts/update_manifest.py",
        "line_number": 119,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.847242"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(MANIFEST_PATH, 'w') as f:",
        "file_path": "scripts/update_manifest.py",
        "line_number": 123,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.847275"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(test_audio_path, \"wb\") as f:",
        "file_path": "scripts/dev/comprehensive_integration_test.py",
        "line_number": 220,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.849357"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(test_audio_path, \"rb\") as f:",
        "file_path": "scripts/dev/comprehensive_integration_test.py",
        "line_number": 224,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.849532"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(\"comprehensive_test_report.json\", \"w\") as f:",
        "file_path": "scripts/dev/comprehensive_integration_test.py",
        "line_number": 402,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.850024"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "scripts/dev/comprehensive_integration_test.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.850312"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(test_audio_path, \"wb\") as f:",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 237,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.850978"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(test_audio_path, \"rb\") as f:",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 241,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.851065"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.851411"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(\"full_stack_test_results.json\", \"w\") as f:",
        "file_path": "scripts/dev/full_stack_function_mapper.py",
        "line_number": 417,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.852492"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(\"function_dependency_graph.json\", \"w\") as f:",
        "file_path": "scripts/dev/full_stack_function_mapper.py",
        "line_number": 459,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.852717"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "scripts/dev/full_stack_function_mapper.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.852950"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(migration_file, 'r') as f:",
        "file_path": "scripts/dev/test_all_functions.py",
        "line_number": 184,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.853815"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(results_file, 'w') as f:",
        "file_path": "scripts/dev/test_all_functions.py",
        "line_number": 403,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.854312"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "scripts/dev/test_all_functions.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.854454"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(\"api/auth_bypass.py\", \"w\") as f:",
        "file_path": "scripts/dev/auth_dev_bypass.py",
        "line_number": 43,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.854672"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(\"api/routes/auth.py\", \"r\") as f:",
        "file_path": "scripts/dev/auth_dev_bypass.py",
        "line_number": 54,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.854727"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(\"api/routes/auth.py\", \"w\") as f:",
        "file_path": "scripts/dev/auth_dev_bypass.py",
        "line_number": 88,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.854813"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(\"api/routes/auth.py\", \"r\") as f:",
        "file_path": "scripts/dev/auth_dev_bypass.py",
        "line_number": 103,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.854868"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(\"api/routes/auth.py\", \"w\") as f:",
        "file_path": "scripts/dev/auth_dev_bypass.py",
        "line_number": 126,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.854937"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, \"wb\") as f:",
        "file_path": "app/main.py",
        "line_number": 975,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.857311"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(transcript_path, \"w\", encoding=\"utf-8\") as f:",
        "file_path": "app/main.py",
        "line_number": 1110,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.858985"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "app/rate_limiter.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.862838"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "app/backup_api.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.864008"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "app/backup_api.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.864162"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "app/worker.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.866540"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "app/worker.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.866630"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "app/schemas.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.867757"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.metadata_file, 'r') as f:",
        "file_path": "app/backup/database.py",
        "line_number": 53,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.868089"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.metadata_file, 'w') as f:",
        "file_path": "app/backup/database.py",
        "line_number": 65,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.868198"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, 'rb') as f:",
        "file_path": "app/backup/database.py",
        "line_number": 378,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.868894"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "app/backup/storage.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.870410"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_index_path, 'r') as f:",
        "file_path": "app/backup/recovery.py",
        "line_number": 95,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.870883"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_index_path, 'r') as f:",
        "file_path": "app/backup/recovery.py",
        "line_number": 245,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.871260"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(log_file, 'w') as f:",
        "file_path": "app/backup/recovery.py",
        "line_number": 751,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.872359"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "app/backup/recovery.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.872498"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "app/backup/recovery.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.872561"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "app/backup/config.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.873262"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "app/backup/config.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.873317"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.file_index_file, 'r') as f:",
        "file_path": "app/backup/files.py",
        "line_number": 112,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.873678"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.content_hash_index_file, 'r') as f:",
        "file_path": "app/backup/files.py",
        "line_number": 119,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.873730"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.file_index_file, 'w') as f:",
        "file_path": "app/backup/files.py",
        "line_number": 126,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.873770"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.content_hash_index_file, 'w') as f:",
        "file_path": "app/backup/files.py",
        "line_number": 129,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.873801"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, 'rb') as f:",
        "file_path": "app/backup/files.py",
        "line_number": 451,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.874474"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "app/backup/files.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.874584"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "app/backup/service.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.875838"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "app/backup/service.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.875888"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(input_path, 'rb') as input_file:",
        "file_path": "app/backup/compression.py",
        "line_number": 233,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.876483"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(output_path, 'wb') as output_file:",
        "file_path": "app/backup/compression.py",
        "line_number": 234,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.876539"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(input_path, 'rb') as input_file:",
        "file_path": "app/backup/compression.py",
        "line_number": 239,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.876602"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(output_path, 'wb') as output_file:",
        "file_path": "app/backup/compression.py",
        "line_number": 240,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.876671"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(input_path, 'rb') as input_file:",
        "file_path": "app/backup/compression.py",
        "line_number": 245,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.876769"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with gzip.open(output_path, 'wb', compresslevel=self.compression_level) as output_file:",
        "file_path": "app/backup/compression.py",
        "line_number": 246,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.876875"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with gzip.open(input_path, 'rb') as input_file:",
        "file_path": "app/backup/compression.py",
        "line_number": 252,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.876953"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(output_path, 'wb') as output_file:",
        "file_path": "app/backup/compression.py",
        "line_number": 253,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.877042"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, 'rb') as f:",
        "file_path": "app/backup/compression.py",
        "line_number": 260,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.877116"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.state_file, 'r') as f:",
        "file_path": "app/backup/orchestrator.py",
        "line_number": 81,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.877667"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.state_file, 'w') as f:",
        "file_path": "app/backup/orchestrator.py",
        "line_number": 94,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.877753"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "app/backup/orchestrator.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.878976"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "app/backup/orchestrator.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.879027"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, 'r', encoding='utf-8') as f:",
        "file_path": "tools/repo_inventory.py",
        "line_number": 153,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.879625"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, 'r', encoding='utf-8') as f:",
        "file_path": "tools/repo_inventory.py",
        "line_number": 318,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.880116"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, 'r', encoding='utf-8') as f:",
        "file_path": "tools/repo_inventory.py",
        "line_number": 355,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.880666"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(output_path, 'w', encoding='utf-8') as f:",
        "file_path": "tools/repo_inventory.py",
        "line_number": 474,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.881257"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(output_file, 'w') as f:",
        "file_path": "tools/test_completeness_evaluator.py",
        "line_number": 302,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.882470"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "tools/test_completeness_evaluator.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.882641"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "tools/test_completeness_evaluator.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.882673"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(env_file) as f:",
        "file_path": "tools/enhanced_comprehensive_validator.py",
        "line_number": 63,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.883009"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
        "file_path": "tools/enhanced_comprehensive_validator.py",
        "line_number": 455,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.883896"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "tools/enhanced_comprehensive_validator.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.884336"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "tools/enhanced_comprehensive_validator.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.884408"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
        "file_path": "tools/security_assessment.py",
        "line_number": 572,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.885745"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
        "file_path": "tools/sql_injection_fixer.py",
        "line_number": 423,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.887058"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "tools/sql_injection_fixer.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.887335"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "tools/sql_injection_fixer.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.887445"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_file) as f:",
        "file_path": "tools/enhanced_validator_extensions.py",
        "line_number": 160,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.888960"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(output_file, 'w') as f:",
        "file_path": "tools/enhanced_validator_extensions.py",
        "line_number": 360,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.889449"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "tools/enhanced_validator_extensions.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.889560"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(inventory_file) as f:",
        "file_path": "tools/validate_docs.py",
        "line_number": 59,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.889910"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(inventory_path) as f:",
        "file_path": "tools/function_validator.py",
        "line_number": 59,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.890535"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_path, 'w') as f:",
        "file_path": "tools/function_validator.py",
        "line_number": 384,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.891223"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(self.inventory_path) as f:",
        "file_path": "tools/update_architecture_docs.py",
        "line_number": 29,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.891741"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, 'r', encoding='utf-8') as f:",
        "file_path": "tools/generate_function_docs.py",
        "line_number": 58,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.892468"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(output_path, 'w', encoding='utf-8') as f:",
        "file_path": "tools/generate_function_docs.py",
        "line_number": 255,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.892884"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(inventory_path) as f:",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": 83,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.893696"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(env_file) as f:",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": 94,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.893770"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(package_json, 'r') as f:",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": 951,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.895522"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(playwright_config, 'r') as f:",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": 1025,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.895759"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(vite_config, 'r') as f:",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": 1161,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.896081"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_path, 'w') as f:",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": 1645,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.897104"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.897766"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(inventory_path) as f:",
        "file_path": "tools/integration_validator.py",
        "line_number": 83,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.898374"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(report_path, 'w') as f:",
        "file_path": "tools/integration_validator.py",
        "line_number": 805,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.899780"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/config_validator.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.900928"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "api/main.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.901856"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/main.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.902019"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "api/paths.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.907057"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/paths.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.907637"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "api/router_setup.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.908019"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/router_setup.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.908056"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(env_file) as f:",
        "file_path": "api/settings.py",
        "line_number": 70,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.910344"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/settings.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.910497"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: async with aiofiles.open(chunk_file, \"wb\") as f:",
        "file_path": "api/services/chunked_upload_service.py",
        "line_number": 102,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.913965"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: async with aiofiles.open(meta_file, \"w\") as f:",
        "file_path": "api/services/chunked_upload_service.py",
        "line_number": 117,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.914115"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: async with aiofiles.open(output_path, \"wb\") as output_file:",
        "file_path": "api/services/chunked_upload_service.py",
        "line_number": 156,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.914242"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: async with aiofiles.open(chunk_file, \"rb\") as chunk:",
        "file_path": "api/services/chunked_upload_service.py",
        "line_number": 160,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.914283"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: async with aiofiles.open(metadata_file, \"w\") as f:",
        "file_path": "api/services/chunked_upload_service.py",
        "line_number": 290,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.914549"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: async with aiofiles.open(metadata_file, \"r\") as f:",
        "file_path": "api/services/chunked_upload_service.py",
        "line_number": 307,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.914645"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/services/chunked_upload_service.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.915428"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(meta_file, 'r') as f:",
        "file_path": "api/routes/admin_chunked_uploads.py",
        "line_number": 204,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.916010"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/routes/admin_chunked_uploads.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.916598"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(file_path, \"wb\") as f:",
        "file_path": "api/routes/jobs.py",
        "line_number": 50,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.916908"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(job.transcript_path, 'r') as f:",
        "file_path": "api/routes/admin.py",
        "line_number": 175,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.917826"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(job.log_path, 'r') as f:",
        "file_path": "api/routes/admin.py",
        "line_number": 184,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.917934"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Potentially unsafe file operation",
        "description": "File operation without apparent validation: with open(log_file, 'r') as f:",
        "file_path": "api/routes/admin.py",
        "line_number": 716,
        "recommendation": "Ensure file paths are validated and sanitized",
        "timestamp": "2025-10-21T10:03:37.919069"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "api/routes/admin.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.919367"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/routes/admin.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.919429"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "api/routes/upload_websockets.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.920677"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/routes/upload_websockets.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.920748"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/routes/chunked_uploads.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.921635"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing file size validation",
        "description": "File upload endpoint may not validate file size",
        "file_path": "api/middlewares/enhanced_cache.py",
        "line_number": null,
        "recommendation": "Implement file size limits to prevent DoS attacks",
        "timestamp": "2025-10-21T10:03:37.925772"
      },
      {
        "severity": "MEDIUM",
        "category": "File Upload",
        "title": "Missing content type validation",
        "description": "File upload endpoint may not validate content type",
        "file_path": "api/middlewares/enhanced_cache.py",
        "line_number": null,
        "recommendation": "Validate file content types to prevent malicious uploads",
        "timestamp": "2025-10-21T10:03:37.925900"
      }
    ],
    "Log Injection": [
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\ud83e\uddea Starting T025 Phase 2 Cache Performance Tests...\")",
        "file_path": "temp/test_cache_performance.py",
        "line_number": 180,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.068812"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\ud83d\udcc4 Detailed results saved to: /tmp/cache_test_results.json\")",
        "file_path": "temp/test_cache_performance.py",
        "line_number": 264,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.069376"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Testing {file_size_mb}MB file upload performance\")",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 310,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.069987"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(\"Starting comprehensive upload performance benchmark\")",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 523,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.070368"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"UPLOAD PERFORMANCE BENCHMARK RESULTS\")",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 565,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.070560"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\\nPerformance Improvement:\")",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 574,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.070716"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\\nDetailed report saved to temp/upload_benchmark_report.json\")",
        "file_path": "temp/upload_performance_benchmark.py",
        "line_number": 586,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.070885"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"Testing {file_size_mb}MB file upload performance...\")",
        "file_path": "temp/chunked_upload_benchmark.py",
        "line_number": 245,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.071456"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"T025 PHASE 5: CHUNKED UPLOAD PERFORMANCE BENCHMARK\")",
        "file_path": "temp/chunked_upload_benchmark.py",
        "line_number": 489,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.071889"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\n4. GENERATING PERFORMANCE REPORT\")",
        "file_path": "temp/chunked_upload_benchmark.py",
        "line_number": 521,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.072086"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Performance report saved to {report_file}\")",
        "file_path": "temp/chunked_upload_benchmark.py",
        "line_number": 532,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.072269"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"PERFORMANCE BENCHMARK SUMMARY\")",
        "file_path": "temp/chunked_upload_benchmark.py",
        "line_number": 540,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.072406"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\\n\ud83d\udcc8 CHUNKED UPLOAD PERFORMANCE:\")",
        "file_path": "temp/chunked_upload_benchmark.py",
        "line_number": 565,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.072608"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"Available test groups: service, processor, tracker, api, performance\")",
        "file_path": "tests/test_chunked_upload_system.py",
        "line_number": 879,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.074601"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"Generating test data: {num_users} users, {num_jobs} jobs, {num_metadata} metadata records...\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 73,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.079559"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"User activity query: {statistics.mean(performance_tester.performance_results['user_activity_optimized']):.2f}ms\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 245,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.079909"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"Metadata analytics query: {statistics.mean(performance_tester.performance_results['metadata_analytics_optimized']):.2f}ms\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 258,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.079990"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"Search query: {statistics.mean(performance_tester.performance_results['search_jobs']):.2f}ms\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 272,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.080039"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: (\"audit_by_user\", lambda: db.query(AuditLog).filter(AuditLog.user_id == 1).count()),",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 301,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.080217"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"Running baseline database performance benchmarks...\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 323,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.080346"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"Database Performance Testing Suite\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 421,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.080579"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\nRunning performance unit tests...\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 425,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.080670"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\nRunning performance benchmarks...\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 429,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.080814"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\nBaseline Performance Results:\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 435,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.080960"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\nPerformance Recommendations:\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 450,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.081131"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u2705 All operations performing well (<100ms)\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 459,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.081214"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u2705 Good throughput performance\")",
        "file_path": "tests/test_database_performance_011.py",
        "line_number": 462,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.081282"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Test user already exists: testuser@example.com\")",
        "file_path": "scripts/create_test_user.py",
        "line_number": 24,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.086293"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"   User ID: {existing_user.id}\")",
        "file_path": "scripts/create_test_user.py",
        "line_number": 25,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.086867"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"   Is Admin: {existing_user.is_admin}\")",
        "file_path": "scripts/create_test_user.py",
        "line_number": 26,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.086908"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Created test user: testuser@example.com\")",
        "file_path": "scripts/create_test_user.py",
        "line_number": 37,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.087001"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"   User ID: {user.id}\")",
        "file_path": "scripts/create_test_user.py",
        "line_number": 38,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.087089"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"   Is Admin: {user.is_admin}\")",
        "file_path": "scripts/create_test_user.py",
        "line_number": 40,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.087383"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c Error creating test user: {e}\")",
        "file_path": "scripts/create_test_user.py",
        "line_number": 43,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.087548"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u2705 PaginationRequest validation works\")",
        "file_path": "scripts/validate_pagination_009.py",
        "line_number": 42,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.088125"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c PaginationRequest validation failed: {e}\")",
        "file_path": "scripts/validate_pagination_009.py",
        "line_number": 62,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.088296"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 User model has {len(user_indexes)} indexes\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 30,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.089065"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\\n\u2705 Job model performance tracking columns:\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 57,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.089248"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\n\u2705 OptimizedUserQueries methods:\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 97,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.089448"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\\n\u2705 QueryPerformanceMonitor initialized with threshold: {monitor.slow_query_threshold_ms}ms\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 106,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.089599"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\nValidating performance monitoring middleware...\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 118,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.089675"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u2705 DatabasePerformanceMiddleware available\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 125,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.089716"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c Failed to import performance middleware: {e}\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 131,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.089756"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u2705 Performance optimization migration script exists\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 143,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.089875"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\nRunning simple performance validation...\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 188,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.089965"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u2705 Import performance is good\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 202,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.090010"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u26a0\ufe0f  Import performance could be improved\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 204,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.090042"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c Performance check failed: {e}\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 209,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.090076"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"Database Performance Optimization Validation\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 216,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.090107"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\ud83c\udf89 All database performance optimizations validated successfully!\")",
        "file_path": "scripts/validate_db_performance.py",
        "line_number": 257,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.090188"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\\n\ud83d\udcc4 Detailed report saved to: comprehensive_test_report.json\")",
        "file_path": "scripts/dev/comprehensive_integration_test.py",
        "line_number": 405,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.090961"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"This framework tests every user action \u2192 backend function chain\")",
        "file_path": "scripts/dev/comprehensive_integration_test.py",
        "line_number": 413,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.091163"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\n\ud83d\uded1 Test interrupted by user\")",
        "file_path": "scripts/dev/comprehensive_integration_test.py",
        "line_number": 452,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.091269"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\n\ud83d\udc65 Creating users...\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 54,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.091626"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 User {username} already exists\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 71,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.091777"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Created user: {username} ({role})\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 75,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.091914"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Password verification works for {username}\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 79,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.092050"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c Password verification failed for {username}\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 82,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.092185"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c Error creating user {username}: {e}\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 85,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.092321"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Login successful for {username}\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 139,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.092557"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c Login response missing token for {username}\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 142,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.092695"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c Login failed for {username}: {response.status_code} - {response.text}\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 144,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.092832"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c Login error for {username}: {e}\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 147,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.092968"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"Using token from user: {username}\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 214,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.093189"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u274c User creation failed\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 298,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.093419"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Users: {len(users)} created\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 324,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.093607"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"  {username}: {password} ({role})\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 343,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.093779"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\n\ud83d\uded1 Fix interrupted by user\")",
        "file_path": "scripts/dev/fix_authentication.py",
        "line_number": 353,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.093925"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\\nDetailed results saved to: full_stack_test_results.json\")",
        "file_path": "scripts/dev/full_stack_function_mapper.py",
        "line_number": 420,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.094759"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"Function dependency graph saved to: function_dependency_graph.json\")",
        "file_path": "scripts/dev/full_stack_function_mapper.py",
        "line_number": 462,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.094882"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\\nThis framework has mapped and tested every user action through\")",
        "file_path": "scripts/dev/full_stack_function_mapper.py",
        "line_number": 485,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.094951"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Admin user already exists: {admin_user.username}\")",
        "file_path": "scripts/dev/init_sqlite_dev.py",
        "line_number": 32,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.095144"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Created admin user: {admin_user.username}\")",
        "file_path": "scripts/dev/init_sqlite_dev.py",
        "line_number": 35,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.095187"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u2705 Created test user: {test_user.username}\")",
        "file_path": "scripts/dev/init_sqlite_dev.py",
        "line_number": 48,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.095248"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"\u274c Error creating users: {e}\")",
        "file_path": "scripts/dev/init_sqlite_dev.py",
        "line_number": 53,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.095283"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"  Test user: testuser / testpass\")",
        "file_path": "scripts/dev/init_sqlite_dev.py",
        "line_number": 101,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.095390"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"  \ud83d\udccb Request {i+1}: Status {response.status_code}\")",
        "file_path": "scripts/dev/test_features.py",
        "line_number": 55,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.096548"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"  \u26a0\ufe0f  Rate limiting not triggered (may need more requests)\")",
        "file_path": "scripts/dev/test_features.py",
        "line_number": 62,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.096742"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"  \ud83d\udccb First request: {first_time:.3f}s\")",
        "file_path": "scripts/dev/test_features.py",
        "line_number": 83,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.096861"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"  \ud83d\udccb Second request: {second_time:.3f}s\")",
        "file_path": "scripts/dev/test_features.py",
        "line_number": 84,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.096994"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: \"class\": \"pythonjsonlogger.jsonlogger.JsonFormatter\"",
        "file_path": "app/main.py",
        "line_number": 132,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.097932"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Successful login for user: {user.username} from IP: {client_ip}\")",
        "file_path": "app/main.py",
        "line_number": 583,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.098559"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"New user registered: {user.username} from IP: {client_ip}\")",
        "file_path": "app/main.py",
        "line_number": 647,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.098676"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Password changed for user: {current_user.username} from IP: {client_ip}\")",
        "file_path": "app/main.py",
        "line_number": 696,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.098754"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Secure transcription request started\", extra={",
        "file_path": "app/main.py",
        "line_number": 956,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.099041"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Job deleted: {validated_id.job_id} by user: {current_user.username} from IP: {client_ip}\")",
        "file_path": "app/main.py",
        "line_number": 1364,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.099518"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.warning(f\"Blocked security tool user-agent: {user_agent}\")",
        "file_path": "app/security_middleware.py",
        "line_number": 202,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.100013"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Global limit: {self.config.global_limit.requests}/{self.config.global_limit.window}s\")",
        "file_path": "app/rate_limiter.py",
        "line_number": 260,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.100895"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"User limit: {self.config.user_limit.requests}/{self.config.user_limit.window}s\")",
        "file_path": "app/rate_limiter.py",
        "line_number": 261,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.100987"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"  {endpoint}: {limit.requests}/{limit.window}s\")",
        "file_path": "app/rate_limiter.py",
        "line_number": 264,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.101102"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.warning(f\"Blocked request from blacklisted IP: {client_ip}\")",
        "file_path": "app/rate_limiter.py",
        "line_number": 273,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.101240"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.warning(f\"Blocked request from non-whitelisted IP: {client_ip}\")",
        "file_path": "app/rate_limiter.py",
        "line_number": 281,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.101374"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"SFTP storage backend initialized: {username}@{hostname}:{port}\")",
        "file_path": "app/backup/storage.py",
        "line_number": 447,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.105498"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Traceback: {traceback.format_exc()}\")",
        "file_path": "app/backup/files.py",
        "line_number": 304,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.108101"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Compressing {input_path} -> {output_path}\")",
        "file_path": "app/backup/compression.py",
        "line_number": 90,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.109845"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Decompressing {input_path} -> {output_path}\")",
        "file_path": "app/backup/compression.py",
        "line_number": 162,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.110001"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u2705 T025 Phase 5 performance benchmarking completed\")",
        "file_path": "tools/test_completeness_evaluator.py",
        "line_number": 49,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.111776"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')",
        "file_path": "tools/enhanced_comprehensive_validator.py",
        "line_number": 34,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.112341"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\ud83d\udee1\ufe0f Assessing input validation...\")",
        "file_path": "tools/security_assessment.py",
        "line_number": 174,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.113271"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(\"\u2705 No errors found (warnings are informational)\")",
        "file_path": "tools/validate_docs.py",
        "line_number": 46,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.115134"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(\"\ud83d\udcca Validating performance monitoring...\")",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": 745,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.117818"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(\"Testing user registration workflow...\")",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": 1355,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.118457"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(traceback.format_exc())",
        "file_path": "tools/comprehensive_validator.py",
        "line_number": 1546,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.118675"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"Avg Response Time: {report['performance_metrics']['average_endpoint_response_time']:.1f}ms\")",
        "file_path": "tools/integration_validator.py",
        "line_number": 900,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.129708"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: and_(AuditLog.user_id == user_id, AuditLog.timestamp >= since_date)",
        "file_path": "api/query_optimizer.py",
        "line_number": 321,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.131237"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"Failed to record performance metric: {e}\")",
        "file_path": "api/query_optimizer.py",
        "line_number": 361,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.131394"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: func.count(QueryPerformanceLog.id).label('total_queries'),",
        "file_path": "api/query_optimizer.py",
        "line_number": 370,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.131519"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: func.avg(QueryPerformanceLog.execution_time_ms).label('avg_execution_time'),",
        "file_path": "api/query_optimizer.py",
        "line_number": 371,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.131627"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: func.max(QueryPerformanceLog.execution_time_ms).label('max_execution_time'),",
        "file_path": "api/query_optimizer.py",
        "line_number": 372,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.131734"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: func.case([(QueryPerformanceLog.execution_time_ms > 100, 1)], else_=None)",
        "file_path": "api/query_optimizer.py",
        "line_number": 374,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.131837"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: ).filter(QueryPerformanceLog.timestamp >= since_time).first()",
        "file_path": "api/query_optimizer.py",
        "line_number": 376,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.131965"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: QueryPerformanceLog.query_type,",
        "file_path": "api/query_optimizer.py",
        "line_number": 380,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.132094"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: QueryPerformanceLog.table_name,",
        "file_path": "api/query_optimizer.py",
        "line_number": 381,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.132183"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: func.avg(QueryPerformanceLog.execution_time_ms).label('avg_time'),",
        "file_path": "api/query_optimizer.py",
        "line_number": 382,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.132291"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: func.count(QueryPerformanceLog.id).label('count')",
        "file_path": "api/query_optimizer.py",
        "line_number": 383,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.132414"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: QueryPerformanceLog.timestamp >= since_time",
        "file_path": "api/query_optimizer.py",
        "line_number": 385,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.132542"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: QueryPerformanceLog.query_type,",
        "file_path": "api/query_optimizer.py",
        "line_number": 387,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.132687"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: QueryPerformanceLog.table_name",
        "file_path": "api/query_optimizer.py",
        "line_number": 388,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.132811"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"SLOW REQUEST: {request.method} {request.url.path}\")",
        "file_path": "api/performance_middleware.py",
        "line_number": 80,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.133725"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"  User Agent: {request.headers.get('user-agent', 'Unknown')}\")",
        "file_path": "api/performance_middleware.py",
        "line_number": 85,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.133868"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: print(f\"Failed to collect performance metrics: {e}\")",
        "file_path": "api/performance_middleware.py",
        "line_number": 131,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.134003"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: QueryPerformanceLog.execution_time_ms >= min_duration_ms",
        "file_path": "api/performance_middleware.py",
        "line_number": 202,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.134191"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: ).order_by(desc(QueryPerformanceLog.execution_time_ms)).limit(limit).all()",
        "file_path": "api/performance_middleware.py",
        "line_number": 203,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.134318"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Warming job list cache for user: {user_id or 'all'}\")",
        "file_path": "api/services/cache_hooks.py",
        "line_number": 147,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.136294"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Warming stats cache for user: {user_id}\")",
        "file_path": "api/services/cache_hooks.py",
        "line_number": 156,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.136390"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Cache warming failed for user stats: {e}\")",
        "file_path": "api/services/cache_hooks.py",
        "line_number": 158,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.136528"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Dashboard data cache hit for user {user_id}\")",
        "file_path": "api/services/database_optimization_integration.py",
        "line_number": 82,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.137043"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to get dashboard data for user {user_id}: {e}\")",
        "file_path": "api/services/database_optimization_integration.py",
        "line_number": 104,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.137198"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Job search failed for user {user_id}, term '{search_term}': {e}\")",
        "file_path": "api/services/database_optimization_integration.py",
        "line_number": 125,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.137384"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Performance analysis failed: {e}\")",
        "file_path": "api/services/database_optimization_integration.py",
        "line_number": 162,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.137557"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Error sending performance alert: {e}\")",
        "file_path": "api/services/websocket_job_integration.py",
        "line_number": 326,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.138568"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(\"Applied SQLite performance optimizations to new connection\")",
        "file_path": "api/services/enhanced_db_optimizer.py",
        "line_number": 134,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.138896"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Created performance index: {index_sql.split('idx_')[1].split(' ')[0]}\")",
        "file_path": "api/services/enhanced_db_optimizer.py",
        "line_number": 198,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.139089"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to create performance indexes: {e}\")",
        "file_path": "api/services/enhanced_db_optimizer.py",
        "line_number": 207,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.139134"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to analyze query performance: {e}\")",
        "file_path": "api/services/enhanced_db_optimizer.py",
        "line_number": 330,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.139275"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"WebSocket connection added: {connection_id} (user: {user_id}, job: {job_id})\")",
        "file_path": "api/services/enhanced_websocket_service.py",
        "line_number": 122,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.140374"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Initialized upload session {session_id} for user {user_id}\")",
        "file_path": "api/services/chunked_upload_service.py",
        "line_number": 364,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.142058"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(\"Created default admin user (username: admin, password: admin123)\")",
        "file_path": "api/services/users.py",
        "line_number": 37,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.142744"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(\"Admin user already exists\")",
        "file_path": "api/services/users.py",
        "line_number": 39,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.142861"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to ensure default admin user: {e}\")",
        "file_path": "api/services/users.py",
        "line_number": 44,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.142898"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Admin bulk action '{request.action}' completed on {len(request.session_ids)} sessions\")",
        "file_path": "api/routes/admin_chunked_uploads.py",
        "line_number": 338,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.143356"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to perform bulk actions: {e}\")",
        "file_path": "api/routes/admin_chunked_uploads.py",
        "line_number": 342,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.143505"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to get performance stats: {e}\")",
        "file_path": "api/routes/admin_chunked_uploads.py",
        "line_number": 398,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.143730"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Error in WebSocket user notifications loop: {e}\")",
        "file_path": "api/routes/websockets.py",
        "line_number": 171,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.144448"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"WebSocket user notifications error: {e}\")",
        "file_path": "api/routes/websockets.py",
        "line_number": 175,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.144591"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.warning(f\"Invalid JSON message from connection {connection_id}: {message}\")",
        "file_path": "api/routes/websockets.py",
        "line_number": 340,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.145132"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.warning(f\"Invalid JSON admin message from connection {connection_id}: {message}\")",
        "file_path": "api/routes/websockets.py",
        "line_number": 387,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.145454"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Admin {current_user['username']} cancelled job {job_id}\")",
        "file_path": "api/routes/admin.py",
        "line_number": 238,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.147111"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Admin {current_user['username']} deleted job {job_id}\")",
        "file_path": "api/routes/admin.py",
        "line_number": 284,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.147256"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Admin {current_user['username']} cleaned up {deleted_count} old jobs\")",
        "file_path": "api/routes/admin.py",
        "line_number": 332,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.147336"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to get performance metrics: {e}\")",
        "file_path": "api/routes/admin.py",
        "line_number": 687,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.147693"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to get performance analysis: {e}\")",
        "file_path": "api/routes/admin_websocket.py",
        "line_number": 312,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.148995"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"WebSocket connected for upload session {session_id} (user: {user_id})\")",
        "file_path": "api/routes/upload_websockets.py",
        "line_number": 75,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.150646"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"User upload notifications WebSocket connected for user {user_id}\")",
        "file_path": "api/routes/upload_websockets.py",
        "line_number": 145,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.150839"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Error in user upload notifications WebSocket: {e}\")",
        "file_path": "api/routes/upload_websockets.py",
        "line_number": 179,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.150948"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"User upload notifications WebSocket disconnected for user {user_id}\")",
        "file_path": "api/routes/upload_websockets.py",
        "line_number": 182,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.150985"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"User upload notifications WebSocket error for user {user_id}: {e}\")",
        "file_path": "api/routes/upload_websockets.py",
        "line_number": 184,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.151014"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Initialized upload session for user {user_id}: {request.filename}\")",
        "file_path": "api/routes/chunked_uploads.py",
        "line_number": 83,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.151726"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to list user uploads: {e}\")",
        "file_path": "api/routes/chunked_uploads.py",
        "line_number": 252,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.151987"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to get performance analysis: {e}\")",
        "file_path": "api/routes/admin_database_optimization.py",
        "line_number": 73,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.152266"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.error(f\"Failed to calculate performance grade: {e}\")",
        "file_path": "api/routes/admin_database_optimization.py",
        "line_number": 424,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.152705"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: formatter = logging.Formatter(",
        "file_path": "api/utils/logger.py",
        "line_number": 33,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.152957"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Thread {thread_id} requesting lock for: {operation}\")",
        "file_path": "api/utils/db_lock.py",
        "line_number": 23,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.153108"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.warning(f\"Rate limit exceeded for {client_ip}: {request_count}/{self.config.max_requests} requests\")",
        "file_path": "api/middlewares/rate_limit.py",
        "line_number": 78,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.153895"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: access_logger.warning(json.dumps(log_data))",
        "file_path": "api/middlewares/access_log.py",
        "line_number": 56,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.154095"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: access_logger.info(json.dumps(log_data))",
        "file_path": "api/middlewares/access_log.py",
        "line_number": 58,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.154142"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Cache hit for {request.url.path}\")",
        "file_path": "api/middlewares/api_cache.py",
        "line_number": 88,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.154313"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Cache hit for {request.url.path} (key: {cache_key[:8]}...)\")",
        "file_path": "api/middlewares/enhanced_cache.py",
        "line_number": 165,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.154572"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.debug(f\"Cache stored for {request.url.path} (key: {cache_key[:8]}...)\")",
        "file_path": "api/middlewares/enhanced_cache.py",
        "line_number": 200,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.154669"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.warning(f\"Failed to cache response for {request.url.path}\")",
        "file_path": "api/middlewares/enhanced_cache.py",
        "line_number": 202,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.154701"
      },
      {
        "severity": "MEDIUM",
        "category": "Log Injection",
        "title": "Potential log injection vulnerability",
        "description": "User input in logging without sanitization: logger.info(f\"Invalidated cache for user {user_id}\")",
        "file_path": "api/middlewares/enhanced_cache.py",
        "line_number": 251,
        "recommendation": "Sanitize user input before logging or use structured logging",
        "timestamp": "2025-10-21T10:03:38.154771"
      }
    ],
    "Configuration": [
      {
        "severity": "MEDIUM",
        "category": "Configuration",
        "title": "Weak secret in configuration",
        "description": "Short secret value detected in .env",
        "file_path": ".env",
        "line_number": 23,
        "recommendation": "Use strong, randomly generated secrets (16+ characters)",
        "timestamp": "2025-10-21T10:03:38.323374"
      },
      {
        "severity": "MEDIUM",
        "category": "Configuration",
        "title": "Weak secret in configuration",
        "description": "Short secret value detected in .env",
        "file_path": ".env",
        "line_number": 25,
        "recommendation": "Use strong, randomly generated secrets (16+ characters)",
        "timestamp": "2025-10-21T10:03:38.323505"
      }
    ]
  },
  "all_findings": [
    {
      "severity": "CRITICAL",
      "category": "SQL Injection",
      "title": "Potential SQL injection vulnerability",
      "description": "Unsafe SQL query construction detected: r'\\.format\\s*\\(.*\\).*execute',  # .format() with execute",
      "file_path": "temp/security_assessment.py",
      "line_number": 63,
      "recommendation": "Use parameterized queries or ORM methods instead of string formatting",
      "timestamp": "2025-10-21T10:03:36.862488"
    },
    {
      "severity": "CRITICAL",
      "category": "SQL Injection",
      "title": "Potential SQL injection vulnerability",
      "description": "Unsafe SQL query construction detected: session.execute(text(f\"SELECT {session_num * 5 + i}\"))",
      "file_path": "tests/test_database_optimization.py",
      "line_number": 462,
      "recommendation": "Use parameterized queries or ORM methods instead of string formatting",
      "timestamp": "2025-10-21T10:03:36.911634"
    },
    {
      "severity": "HIGH",
      "category": "SQL Injection",
      "title": "Raw SQL query with potential user input",
      "description": "Raw SQL query may be vulnerable: conn.execute(\"PRAGMA synchronous=NORMAL\")      # Balance safety and performance",
      "file_path": "app/backup/database.py",
      "line_number": 82,
      "recommendation": "Review and ensure proper parameterization",
      "timestamp": "2025-10-21T10:03:36.987905"
    },
    {
      "severity": "CRITICAL",
      "category": "SQL Injection",
      "title": "Potential SQL injection vulnerability",
      "description": "Unsafe SQL query construction detected: result = conn.execute(f\"SELECT COUNT(*) FROM {table}\").fetchone()",
      "file_path": "app/backup/database.py",
      "line_number": 405,
      "recommendation": "Use parameterized queries or ORM methods instead of string formatting",
      "timestamp": "2025-10-21T10:03:36.990515"
    },
    {
      "severity": "HIGH",
      "category": "Authentication",
      "title": "Hardcoded secret detected",
      "description": "Potential hardcoded secret: user = User(username=\"benchmark_user\", hashed_password=\"hash\", role=\"user\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 333,
      "recommendation": "Move secrets to environment variables or secure configuration",
      "timestamp": "2025-10-21T10:03:37.375062"
    },
    {
      "severity": "HIGH",
      "category": "Authentication",
      "title": "Hardcoded secret detected",
      "description": "Potential hardcoded secret: hashed_password=\"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\",  # secret",
      "file_path": "scripts/create_test_user.py",
      "line_number": 33,
      "recommendation": "Move secrets to environment variables or secure configuration",
      "timestamp": "2025-10-21T10:03:37.381498"
    },
    {
      "severity": "HIGH",
      "category": "Authentication",
      "title": "Hardcoded secret detected",
      "description": "Potential hardcoded secret: database_operations=[\"INSERT/UPDATE user_settings WHERE user_id=? AND key='default_model'\"],",
      "file_path": "scripts/dev/full_stack_function_mapper.py",
      "line_number": 223,
      "recommendation": "Move secrets to environment variables or secure configuration",
      "timestamp": "2025-10-21T10:03:37.404052"
    },
    {
      "severity": "MEDIUM",
      "category": "Authentication",
      "title": "JWT without expiration",
      "description": "JWT token may not have expiration set: encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
      "file_path": "app/main.py",
      "line_number": 397,
      "recommendation": "Always set JWT expiration time",
      "timestamp": "2025-10-21T10:03:37.422118"
    },
    {
      "severity": "HIGH",
      "category": "Authentication",
      "title": "Weak password hashing",
      "description": "Weak hashing algorithm for passwords: return hashlib.sha256(password.encode()).hexdigest()",
      "file_path": "api/services/users.py",
      "line_number": 16,
      "recommendation": "Use bcrypt, scrypt, or Argon2 for password hashing",
      "timestamp": "2025-10-21T10:03:37.608205"
    },
    {
      "severity": "HIGH",
      "category": "Authentication",
      "title": "Weak password hashing",
      "description": "Weak hashing algorithm for passwords: \"\"\"Hash a password using SHA256.\"\"\"",
      "file_path": "api/routes/auth.py",
      "line_number": 57,
      "recommendation": "Use bcrypt, scrypt, or Argon2 for password hashing",
      "timestamp": "2025-10-21T10:03:37.636945"
    },
    {
      "severity": "HIGH",
      "category": "Authentication",
      "title": "Weak password hashing",
      "description": "Weak hashing algorithm for passwords: return hashlib.sha256(password.encode()).hexdigest()",
      "file_path": "api/routes/auth.py",
      "line_number": 58,
      "recommendation": "Use bcrypt, scrypt, or Argon2 for password hashing",
      "timestamp": "2025-10-21T10:03:37.637072"
    },
    {
      "severity": "MEDIUM",
      "category": "Authentication",
      "title": "JWT without expiration",
      "description": "JWT token may not have expiration set: encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
      "file_path": "api/routes/auth.py",
      "line_number": 72,
      "recommendation": "Always set JWT expiration time",
      "timestamp": "2025-10-21T10:03:37.637303"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: if 'open(' in line and any(mode in line for mode in ['w', 'a', 'x']):",
      "file_path": "temp/security_assessment.py",
      "line_number": 217,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.823606"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
      "file_path": "temp/security_assessment.py",
      "line_number": 619,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.824459"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open('/tmp/cache_test_results.json', 'w') as f:",
      "file_path": "temp/test_cache_performance.py",
      "line_number": 261,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.825322"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(temp_file.name, 'wb') as f:",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 72,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.825722"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, 'rb') as f:",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 93,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.825926"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: async with aiofiles.open(file_path, 'rb') as f:",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 252,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.826267"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: async with aiofiles.open(file_path, 'rb') as f:",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 438,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.826682"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 552,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.827010"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(temp_file.name, 'wb') as f:",
      "file_path": "temp/chunked_upload_benchmark.py",
      "line_number": 72,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.827503"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
      "file_path": "temp/chunked_upload_benchmark.py",
      "line_number": 529,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.828536"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "temp/chunked_upload_benchmark.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.828934"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(temp_test_file, 'r') as original, open(decompressed_file.name, 'r') as decompressed:",
      "file_path": "tests/test_backup_system.py",
      "line_number": 251,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.829607"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(temp_test_file, 'r') as original, open(download_file.name, 'r') as downloaded:",
      "file_path": "tests/test_backup_system.py",
      "line_number": 301,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.829785"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "tests/test_backup_system.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.830626"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(chunk_file, \"rb\") as f:",
      "file_path": "tests/test_chunked_upload_system.py",
      "line_number": 334,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.831500"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(meta_file, \"r\") as f:",
      "file_path": "tests/test_chunked_upload_system.py",
      "line_number": 339,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.831681"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(chunk_file, \"wb\") as f:",
      "file_path": "tests/test_chunked_upload_system.py",
      "line_number": 385,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.831859"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(output_path, \"rb\") as f:",
      "file_path": "tests/test_chunked_upload_system.py",
      "line_number": 401,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.832036"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(chunk_file_0, \"wb\") as f:",
      "file_path": "tests/test_chunked_upload_system.py",
      "line_number": 435,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.832244"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(chunk_file_2, \"wb\") as f:",
      "file_path": "tests/test_chunked_upload_system.py",
      "line_number": 437,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.832394"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "tests/test_chunked_upload_system.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.833391"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.compose_file) as f:",
      "file_path": "tests/test_container_security_008.py",
      "line_number": 31,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.835281"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "tests/test_backup_validation.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.844692"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "tests/test_backup_validation.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.845123"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.846300"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(apt_path) as f:",
      "file_path": "scripts/update_manifest.py",
      "line_number": 55,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.846892"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(MANIFEST_PATH, 'a') as mf:",
      "file_path": "scripts/update_manifest.py",
      "line_number": 58,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.847016"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(dockerfile_path) as df:",
      "file_path": "scripts/update_manifest.py",
      "line_number": 64,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.847058"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(pip_versions_path, 'w') as pf:",
      "file_path": "scripts/update_manifest.py",
      "line_number": 102,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.847157"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(pip_versions_path, 'rb') as pf:",
      "file_path": "scripts/update_manifest.py",
      "line_number": 109,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.847197"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(npm_versions_path, 'rb') as nf:",
      "file_path": "scripts/update_manifest.py",
      "line_number": 119,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.847242"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(MANIFEST_PATH, 'w') as f:",
      "file_path": "scripts/update_manifest.py",
      "line_number": 123,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.847275"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(test_audio_path, \"wb\") as f:",
      "file_path": "scripts/dev/comprehensive_integration_test.py",
      "line_number": 220,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.849357"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(test_audio_path, \"rb\") as f:",
      "file_path": "scripts/dev/comprehensive_integration_test.py",
      "line_number": 224,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.849532"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(\"comprehensive_test_report.json\", \"w\") as f:",
      "file_path": "scripts/dev/comprehensive_integration_test.py",
      "line_number": 402,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.850024"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "scripts/dev/comprehensive_integration_test.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.850312"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(test_audio_path, \"wb\") as f:",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 237,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.850978"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(test_audio_path, \"rb\") as f:",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 241,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.851065"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.851411"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(\"full_stack_test_results.json\", \"w\") as f:",
      "file_path": "scripts/dev/full_stack_function_mapper.py",
      "line_number": 417,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.852492"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(\"function_dependency_graph.json\", \"w\") as f:",
      "file_path": "scripts/dev/full_stack_function_mapper.py",
      "line_number": 459,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.852717"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "scripts/dev/full_stack_function_mapper.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.852950"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(migration_file, 'r') as f:",
      "file_path": "scripts/dev/test_all_functions.py",
      "line_number": 184,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.853815"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(results_file, 'w') as f:",
      "file_path": "scripts/dev/test_all_functions.py",
      "line_number": 403,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.854312"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "scripts/dev/test_all_functions.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.854454"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(\"api/auth_bypass.py\", \"w\") as f:",
      "file_path": "scripts/dev/auth_dev_bypass.py",
      "line_number": 43,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.854672"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(\"api/routes/auth.py\", \"r\") as f:",
      "file_path": "scripts/dev/auth_dev_bypass.py",
      "line_number": 54,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.854727"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(\"api/routes/auth.py\", \"w\") as f:",
      "file_path": "scripts/dev/auth_dev_bypass.py",
      "line_number": 88,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.854813"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(\"api/routes/auth.py\", \"r\") as f:",
      "file_path": "scripts/dev/auth_dev_bypass.py",
      "line_number": 103,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.854868"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(\"api/routes/auth.py\", \"w\") as f:",
      "file_path": "scripts/dev/auth_dev_bypass.py",
      "line_number": 126,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.854937"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, \"wb\") as f:",
      "file_path": "app/main.py",
      "line_number": 975,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.857311"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(transcript_path, \"w\", encoding=\"utf-8\") as f:",
      "file_path": "app/main.py",
      "line_number": 1110,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.858985"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "app/rate_limiter.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.862838"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "app/backup_api.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.864008"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "app/backup_api.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.864162"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "app/worker.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.866540"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "app/worker.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.866630"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "app/schemas.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.867757"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.metadata_file, 'r') as f:",
      "file_path": "app/backup/database.py",
      "line_number": 53,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.868089"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.metadata_file, 'w') as f:",
      "file_path": "app/backup/database.py",
      "line_number": 65,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.868198"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, 'rb') as f:",
      "file_path": "app/backup/database.py",
      "line_number": 378,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.868894"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "app/backup/storage.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.870410"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_index_path, 'r') as f:",
      "file_path": "app/backup/recovery.py",
      "line_number": 95,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.870883"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_index_path, 'r') as f:",
      "file_path": "app/backup/recovery.py",
      "line_number": 245,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.871260"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(log_file, 'w') as f:",
      "file_path": "app/backup/recovery.py",
      "line_number": 751,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.872359"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "app/backup/recovery.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.872498"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "app/backup/recovery.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.872561"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "app/backup/config.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.873262"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "app/backup/config.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.873317"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.file_index_file, 'r') as f:",
      "file_path": "app/backup/files.py",
      "line_number": 112,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.873678"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.content_hash_index_file, 'r') as f:",
      "file_path": "app/backup/files.py",
      "line_number": 119,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.873730"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.file_index_file, 'w') as f:",
      "file_path": "app/backup/files.py",
      "line_number": 126,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.873770"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.content_hash_index_file, 'w') as f:",
      "file_path": "app/backup/files.py",
      "line_number": 129,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.873801"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, 'rb') as f:",
      "file_path": "app/backup/files.py",
      "line_number": 451,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.874474"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "app/backup/files.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.874584"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "app/backup/service.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.875838"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "app/backup/service.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.875888"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(input_path, 'rb') as input_file:",
      "file_path": "app/backup/compression.py",
      "line_number": 233,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.876483"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(output_path, 'wb') as output_file:",
      "file_path": "app/backup/compression.py",
      "line_number": 234,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.876539"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(input_path, 'rb') as input_file:",
      "file_path": "app/backup/compression.py",
      "line_number": 239,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.876602"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(output_path, 'wb') as output_file:",
      "file_path": "app/backup/compression.py",
      "line_number": 240,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.876671"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(input_path, 'rb') as input_file:",
      "file_path": "app/backup/compression.py",
      "line_number": 245,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.876769"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with gzip.open(output_path, 'wb', compresslevel=self.compression_level) as output_file:",
      "file_path": "app/backup/compression.py",
      "line_number": 246,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.876875"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with gzip.open(input_path, 'rb') as input_file:",
      "file_path": "app/backup/compression.py",
      "line_number": 252,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.876953"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(output_path, 'wb') as output_file:",
      "file_path": "app/backup/compression.py",
      "line_number": 253,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.877042"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, 'rb') as f:",
      "file_path": "app/backup/compression.py",
      "line_number": 260,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.877116"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.state_file, 'r') as f:",
      "file_path": "app/backup/orchestrator.py",
      "line_number": 81,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.877667"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.state_file, 'w') as f:",
      "file_path": "app/backup/orchestrator.py",
      "line_number": 94,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.877753"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "app/backup/orchestrator.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.878976"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "app/backup/orchestrator.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.879027"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "tools/repo_inventory.py",
      "line_number": 153,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.879625"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "tools/repo_inventory.py",
      "line_number": 318,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.880116"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "tools/repo_inventory.py",
      "line_number": 355,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.880666"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(output_path, 'w', encoding='utf-8') as f:",
      "file_path": "tools/repo_inventory.py",
      "line_number": 474,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.881257"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(output_file, 'w') as f:",
      "file_path": "tools/test_completeness_evaluator.py",
      "line_number": 302,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.882470"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "tools/test_completeness_evaluator.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.882641"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "tools/test_completeness_evaluator.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.882673"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(env_file) as f:",
      "file_path": "tools/enhanced_comprehensive_validator.py",
      "line_number": 63,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.883009"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
      "file_path": "tools/enhanced_comprehensive_validator.py",
      "line_number": 455,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.883896"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "tools/enhanced_comprehensive_validator.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.884336"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "tools/enhanced_comprehensive_validator.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.884408"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
      "file_path": "tools/security_assessment.py",
      "line_number": 572,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.885745"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_file, 'w') as f:",
      "file_path": "tools/sql_injection_fixer.py",
      "line_number": 423,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.887058"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "tools/sql_injection_fixer.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.887335"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "tools/sql_injection_fixer.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.887445"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_file) as f:",
      "file_path": "tools/enhanced_validator_extensions.py",
      "line_number": 160,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.888960"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(output_file, 'w') as f:",
      "file_path": "tools/enhanced_validator_extensions.py",
      "line_number": 360,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.889449"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "tools/enhanced_validator_extensions.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.889560"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(inventory_file) as f:",
      "file_path": "tools/validate_docs.py",
      "line_number": 59,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.889910"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(inventory_path) as f:",
      "file_path": "tools/function_validator.py",
      "line_number": 59,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.890535"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_path, 'w') as f:",
      "file_path": "tools/function_validator.py",
      "line_number": 384,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.891223"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(self.inventory_path) as f:",
      "file_path": "tools/update_architecture_docs.py",
      "line_number": 29,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.891741"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, 'r', encoding='utf-8') as f:",
      "file_path": "tools/generate_function_docs.py",
      "line_number": 58,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.892468"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(output_path, 'w', encoding='utf-8') as f:",
      "file_path": "tools/generate_function_docs.py",
      "line_number": 255,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.892884"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(inventory_path) as f:",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": 83,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.893696"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(env_file) as f:",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": 94,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.893770"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(package_json, 'r') as f:",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": 951,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.895522"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(playwright_config, 'r') as f:",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": 1025,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.895759"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(vite_config, 'r') as f:",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": 1161,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.896081"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_path, 'w') as f:",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": 1645,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.897104"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.897766"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(inventory_path) as f:",
      "file_path": "tools/integration_validator.py",
      "line_number": 83,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.898374"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(report_path, 'w') as f:",
      "file_path": "tools/integration_validator.py",
      "line_number": 805,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.899780"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/config_validator.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.900928"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "api/main.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.901856"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/main.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.902019"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "api/paths.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.907057"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/paths.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.907637"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "api/router_setup.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.908019"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/router_setup.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.908056"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(env_file) as f:",
      "file_path": "api/settings.py",
      "line_number": 70,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.910344"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/settings.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.910497"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: async with aiofiles.open(chunk_file, \"wb\") as f:",
      "file_path": "api/services/chunked_upload_service.py",
      "line_number": 102,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.913965"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: async with aiofiles.open(meta_file, \"w\") as f:",
      "file_path": "api/services/chunked_upload_service.py",
      "line_number": 117,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.914115"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: async with aiofiles.open(output_path, \"wb\") as output_file:",
      "file_path": "api/services/chunked_upload_service.py",
      "line_number": 156,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.914242"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: async with aiofiles.open(chunk_file, \"rb\") as chunk:",
      "file_path": "api/services/chunked_upload_service.py",
      "line_number": 160,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.914283"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: async with aiofiles.open(metadata_file, \"w\") as f:",
      "file_path": "api/services/chunked_upload_service.py",
      "line_number": 290,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.914549"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: async with aiofiles.open(metadata_file, \"r\") as f:",
      "file_path": "api/services/chunked_upload_service.py",
      "line_number": 307,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.914645"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/services/chunked_upload_service.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.915428"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(meta_file, 'r') as f:",
      "file_path": "api/routes/admin_chunked_uploads.py",
      "line_number": 204,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.916010"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/routes/admin_chunked_uploads.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.916598"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(file_path, \"wb\") as f:",
      "file_path": "api/routes/jobs.py",
      "line_number": 50,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.916908"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(job.transcript_path, 'r') as f:",
      "file_path": "api/routes/admin.py",
      "line_number": 175,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.917826"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(job.log_path, 'r') as f:",
      "file_path": "api/routes/admin.py",
      "line_number": 184,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.917934"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Potentially unsafe file operation",
      "description": "File operation without apparent validation: with open(log_file, 'r') as f:",
      "file_path": "api/routes/admin.py",
      "line_number": 716,
      "recommendation": "Ensure file paths are validated and sanitized",
      "timestamp": "2025-10-21T10:03:37.919069"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "api/routes/admin.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.919367"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/routes/admin.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.919429"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "api/routes/upload_websockets.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.920677"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/routes/upload_websockets.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.920748"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/routes/chunked_uploads.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.921635"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing file size validation",
      "description": "File upload endpoint may not validate file size",
      "file_path": "api/middlewares/enhanced_cache.py",
      "line_number": null,
      "recommendation": "Implement file size limits to prevent DoS attacks",
      "timestamp": "2025-10-21T10:03:37.925772"
    },
    {
      "severity": "MEDIUM",
      "category": "File Upload",
      "title": "Missing content type validation",
      "description": "File upload endpoint may not validate content type",
      "file_path": "api/middlewares/enhanced_cache.py",
      "line_number": null,
      "recommendation": "Validate file content types to prevent malicious uploads",
      "timestamp": "2025-10-21T10:03:37.925900"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\ud83e\uddea Starting T025 Phase 2 Cache Performance Tests...\")",
      "file_path": "temp/test_cache_performance.py",
      "line_number": 180,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.068812"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\ud83d\udcc4 Detailed results saved to: /tmp/cache_test_results.json\")",
      "file_path": "temp/test_cache_performance.py",
      "line_number": 264,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.069376"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Testing {file_size_mb}MB file upload performance\")",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 310,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.069987"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(\"Starting comprehensive upload performance benchmark\")",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 523,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.070368"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"UPLOAD PERFORMANCE BENCHMARK RESULTS\")",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 565,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.070560"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\\nPerformance Improvement:\")",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 574,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.070716"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\\nDetailed report saved to temp/upload_benchmark_report.json\")",
      "file_path": "temp/upload_performance_benchmark.py",
      "line_number": 586,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.070885"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"Testing {file_size_mb}MB file upload performance...\")",
      "file_path": "temp/chunked_upload_benchmark.py",
      "line_number": 245,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.071456"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"T025 PHASE 5: CHUNKED UPLOAD PERFORMANCE BENCHMARK\")",
      "file_path": "temp/chunked_upload_benchmark.py",
      "line_number": 489,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.071889"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\n4. GENERATING PERFORMANCE REPORT\")",
      "file_path": "temp/chunked_upload_benchmark.py",
      "line_number": 521,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.072086"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Performance report saved to {report_file}\")",
      "file_path": "temp/chunked_upload_benchmark.py",
      "line_number": 532,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.072269"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"PERFORMANCE BENCHMARK SUMMARY\")",
      "file_path": "temp/chunked_upload_benchmark.py",
      "line_number": 540,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.072406"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\\n\ud83d\udcc8 CHUNKED UPLOAD PERFORMANCE:\")",
      "file_path": "temp/chunked_upload_benchmark.py",
      "line_number": 565,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.072608"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"Available test groups: service, processor, tracker, api, performance\")",
      "file_path": "tests/test_chunked_upload_system.py",
      "line_number": 879,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.074601"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"Generating test data: {num_users} users, {num_jobs} jobs, {num_metadata} metadata records...\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 73,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.079559"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"User activity query: {statistics.mean(performance_tester.performance_results['user_activity_optimized']):.2f}ms\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 245,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.079909"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"Metadata analytics query: {statistics.mean(performance_tester.performance_results['metadata_analytics_optimized']):.2f}ms\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 258,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.079990"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"Search query: {statistics.mean(performance_tester.performance_results['search_jobs']):.2f}ms\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 272,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.080039"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: (\"audit_by_user\", lambda: db.query(AuditLog).filter(AuditLog.user_id == 1).count()),",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 301,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.080217"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"Running baseline database performance benchmarks...\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 323,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.080346"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"Database Performance Testing Suite\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 421,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.080579"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\nRunning performance unit tests...\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 425,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.080670"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\nRunning performance benchmarks...\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 429,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.080814"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\nBaseline Performance Results:\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 435,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.080960"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\nPerformance Recommendations:\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 450,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.081131"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u2705 All operations performing well (<100ms)\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 459,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.081214"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u2705 Good throughput performance\")",
      "file_path": "tests/test_database_performance_011.py",
      "line_number": 462,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.081282"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Test user already exists: testuser@example.com\")",
      "file_path": "scripts/create_test_user.py",
      "line_number": 24,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.086293"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"   User ID: {existing_user.id}\")",
      "file_path": "scripts/create_test_user.py",
      "line_number": 25,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.086867"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"   Is Admin: {existing_user.is_admin}\")",
      "file_path": "scripts/create_test_user.py",
      "line_number": 26,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.086908"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Created test user: testuser@example.com\")",
      "file_path": "scripts/create_test_user.py",
      "line_number": 37,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.087001"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"   User ID: {user.id}\")",
      "file_path": "scripts/create_test_user.py",
      "line_number": 38,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.087089"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"   Is Admin: {user.is_admin}\")",
      "file_path": "scripts/create_test_user.py",
      "line_number": 40,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.087383"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c Error creating test user: {e}\")",
      "file_path": "scripts/create_test_user.py",
      "line_number": 43,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.087548"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u2705 PaginationRequest validation works\")",
      "file_path": "scripts/validate_pagination_009.py",
      "line_number": 42,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.088125"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c PaginationRequest validation failed: {e}\")",
      "file_path": "scripts/validate_pagination_009.py",
      "line_number": 62,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.088296"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 User model has {len(user_indexes)} indexes\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 30,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.089065"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\\n\u2705 Job model performance tracking columns:\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 57,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.089248"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\n\u2705 OptimizedUserQueries methods:\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 97,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.089448"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\\n\u2705 QueryPerformanceMonitor initialized with threshold: {monitor.slow_query_threshold_ms}ms\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 106,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.089599"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\nValidating performance monitoring middleware...\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 118,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.089675"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u2705 DatabasePerformanceMiddleware available\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 125,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.089716"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c Failed to import performance middleware: {e}\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 131,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.089756"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u2705 Performance optimization migration script exists\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 143,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.089875"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\nRunning simple performance validation...\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 188,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.089965"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u2705 Import performance is good\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 202,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.090010"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u26a0\ufe0f  Import performance could be improved\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 204,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.090042"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c Performance check failed: {e}\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 209,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.090076"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"Database Performance Optimization Validation\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 216,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.090107"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\ud83c\udf89 All database performance optimizations validated successfully!\")",
      "file_path": "scripts/validate_db_performance.py",
      "line_number": 257,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.090188"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\\n\ud83d\udcc4 Detailed report saved to: comprehensive_test_report.json\")",
      "file_path": "scripts/dev/comprehensive_integration_test.py",
      "line_number": 405,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.090961"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"This framework tests every user action \u2192 backend function chain\")",
      "file_path": "scripts/dev/comprehensive_integration_test.py",
      "line_number": 413,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.091163"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\n\ud83d\uded1 Test interrupted by user\")",
      "file_path": "scripts/dev/comprehensive_integration_test.py",
      "line_number": 452,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.091269"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\n\ud83d\udc65 Creating users...\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 54,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.091626"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 User {username} already exists\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 71,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.091777"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Created user: {username} ({role})\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 75,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.091914"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Password verification works for {username}\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 79,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.092050"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c Password verification failed for {username}\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 82,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.092185"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c Error creating user {username}: {e}\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 85,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.092321"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Login successful for {username}\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 139,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.092557"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c Login response missing token for {username}\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 142,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.092695"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c Login failed for {username}: {response.status_code} - {response.text}\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 144,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.092832"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c Login error for {username}: {e}\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 147,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.092968"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"Using token from user: {username}\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 214,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.093189"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u274c User creation failed\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 298,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.093419"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Users: {len(users)} created\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 324,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.093607"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"  {username}: {password} ({role})\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 343,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.093779"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\n\ud83d\uded1 Fix interrupted by user\")",
      "file_path": "scripts/dev/fix_authentication.py",
      "line_number": 353,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.093925"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\\nDetailed results saved to: full_stack_test_results.json\")",
      "file_path": "scripts/dev/full_stack_function_mapper.py",
      "line_number": 420,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.094759"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"Function dependency graph saved to: function_dependency_graph.json\")",
      "file_path": "scripts/dev/full_stack_function_mapper.py",
      "line_number": 462,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.094882"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\\nThis framework has mapped and tested every user action through\")",
      "file_path": "scripts/dev/full_stack_function_mapper.py",
      "line_number": 485,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.094951"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Admin user already exists: {admin_user.username}\")",
      "file_path": "scripts/dev/init_sqlite_dev.py",
      "line_number": 32,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.095144"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Created admin user: {admin_user.username}\")",
      "file_path": "scripts/dev/init_sqlite_dev.py",
      "line_number": 35,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.095187"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u2705 Created test user: {test_user.username}\")",
      "file_path": "scripts/dev/init_sqlite_dev.py",
      "line_number": 48,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.095248"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"\u274c Error creating users: {e}\")",
      "file_path": "scripts/dev/init_sqlite_dev.py",
      "line_number": 53,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.095283"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"  Test user: testuser / testpass\")",
      "file_path": "scripts/dev/init_sqlite_dev.py",
      "line_number": 101,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.095390"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"  \ud83d\udccb Request {i+1}: Status {response.status_code}\")",
      "file_path": "scripts/dev/test_features.py",
      "line_number": 55,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.096548"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"  \u26a0\ufe0f  Rate limiting not triggered (may need more requests)\")",
      "file_path": "scripts/dev/test_features.py",
      "line_number": 62,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.096742"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"  \ud83d\udccb First request: {first_time:.3f}s\")",
      "file_path": "scripts/dev/test_features.py",
      "line_number": 83,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.096861"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"  \ud83d\udccb Second request: {second_time:.3f}s\")",
      "file_path": "scripts/dev/test_features.py",
      "line_number": 84,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.096994"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: \"class\": \"pythonjsonlogger.jsonlogger.JsonFormatter\"",
      "file_path": "app/main.py",
      "line_number": 132,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.097932"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Successful login for user: {user.username} from IP: {client_ip}\")",
      "file_path": "app/main.py",
      "line_number": 583,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.098559"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"New user registered: {user.username} from IP: {client_ip}\")",
      "file_path": "app/main.py",
      "line_number": 647,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.098676"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Password changed for user: {current_user.username} from IP: {client_ip}\")",
      "file_path": "app/main.py",
      "line_number": 696,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.098754"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Secure transcription request started\", extra={",
      "file_path": "app/main.py",
      "line_number": 956,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.099041"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Job deleted: {validated_id.job_id} by user: {current_user.username} from IP: {client_ip}\")",
      "file_path": "app/main.py",
      "line_number": 1364,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.099518"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.warning(f\"Blocked security tool user-agent: {user_agent}\")",
      "file_path": "app/security_middleware.py",
      "line_number": 202,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.100013"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Global limit: {self.config.global_limit.requests}/{self.config.global_limit.window}s\")",
      "file_path": "app/rate_limiter.py",
      "line_number": 260,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.100895"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"User limit: {self.config.user_limit.requests}/{self.config.user_limit.window}s\")",
      "file_path": "app/rate_limiter.py",
      "line_number": 261,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.100987"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"  {endpoint}: {limit.requests}/{limit.window}s\")",
      "file_path": "app/rate_limiter.py",
      "line_number": 264,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.101102"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.warning(f\"Blocked request from blacklisted IP: {client_ip}\")",
      "file_path": "app/rate_limiter.py",
      "line_number": 273,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.101240"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.warning(f\"Blocked request from non-whitelisted IP: {client_ip}\")",
      "file_path": "app/rate_limiter.py",
      "line_number": 281,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.101374"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"SFTP storage backend initialized: {username}@{hostname}:{port}\")",
      "file_path": "app/backup/storage.py",
      "line_number": 447,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.105498"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Traceback: {traceback.format_exc()}\")",
      "file_path": "app/backup/files.py",
      "line_number": 304,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.108101"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Compressing {input_path} -> {output_path}\")",
      "file_path": "app/backup/compression.py",
      "line_number": 90,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.109845"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Decompressing {input_path} -> {output_path}\")",
      "file_path": "app/backup/compression.py",
      "line_number": 162,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.110001"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u2705 T025 Phase 5 performance benchmarking completed\")",
      "file_path": "tools/test_completeness_evaluator.py",
      "line_number": 49,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.111776"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')",
      "file_path": "tools/enhanced_comprehensive_validator.py",
      "line_number": 34,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.112341"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\ud83d\udee1\ufe0f Assessing input validation...\")",
      "file_path": "tools/security_assessment.py",
      "line_number": 174,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.113271"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(\"\u2705 No errors found (warnings are informational)\")",
      "file_path": "tools/validate_docs.py",
      "line_number": 46,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.115134"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(\"\ud83d\udcca Validating performance monitoring...\")",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": 745,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.117818"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(\"Testing user registration workflow...\")",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": 1355,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.118457"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(traceback.format_exc())",
      "file_path": "tools/comprehensive_validator.py",
      "line_number": 1546,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.118675"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"Avg Response Time: {report['performance_metrics']['average_endpoint_response_time']:.1f}ms\")",
      "file_path": "tools/integration_validator.py",
      "line_number": 900,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.129708"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: and_(AuditLog.user_id == user_id, AuditLog.timestamp >= since_date)",
      "file_path": "api/query_optimizer.py",
      "line_number": 321,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.131237"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"Failed to record performance metric: {e}\")",
      "file_path": "api/query_optimizer.py",
      "line_number": 361,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.131394"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: func.count(QueryPerformanceLog.id).label('total_queries'),",
      "file_path": "api/query_optimizer.py",
      "line_number": 370,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.131519"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: func.avg(QueryPerformanceLog.execution_time_ms).label('avg_execution_time'),",
      "file_path": "api/query_optimizer.py",
      "line_number": 371,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.131627"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: func.max(QueryPerformanceLog.execution_time_ms).label('max_execution_time'),",
      "file_path": "api/query_optimizer.py",
      "line_number": 372,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.131734"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: func.case([(QueryPerformanceLog.execution_time_ms > 100, 1)], else_=None)",
      "file_path": "api/query_optimizer.py",
      "line_number": 374,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.131837"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: ).filter(QueryPerformanceLog.timestamp >= since_time).first()",
      "file_path": "api/query_optimizer.py",
      "line_number": 376,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.131965"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: QueryPerformanceLog.query_type,",
      "file_path": "api/query_optimizer.py",
      "line_number": 380,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.132094"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: QueryPerformanceLog.table_name,",
      "file_path": "api/query_optimizer.py",
      "line_number": 381,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.132183"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: func.avg(QueryPerformanceLog.execution_time_ms).label('avg_time'),",
      "file_path": "api/query_optimizer.py",
      "line_number": 382,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.132291"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: func.count(QueryPerformanceLog.id).label('count')",
      "file_path": "api/query_optimizer.py",
      "line_number": 383,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.132414"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: QueryPerformanceLog.timestamp >= since_time",
      "file_path": "api/query_optimizer.py",
      "line_number": 385,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.132542"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: QueryPerformanceLog.query_type,",
      "file_path": "api/query_optimizer.py",
      "line_number": 387,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.132687"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: QueryPerformanceLog.table_name",
      "file_path": "api/query_optimizer.py",
      "line_number": 388,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.132811"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"SLOW REQUEST: {request.method} {request.url.path}\")",
      "file_path": "api/performance_middleware.py",
      "line_number": 80,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.133725"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"  User Agent: {request.headers.get('user-agent', 'Unknown')}\")",
      "file_path": "api/performance_middleware.py",
      "line_number": 85,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.133868"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: print(f\"Failed to collect performance metrics: {e}\")",
      "file_path": "api/performance_middleware.py",
      "line_number": 131,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.134003"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: QueryPerformanceLog.execution_time_ms >= min_duration_ms",
      "file_path": "api/performance_middleware.py",
      "line_number": 202,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.134191"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: ).order_by(desc(QueryPerformanceLog.execution_time_ms)).limit(limit).all()",
      "file_path": "api/performance_middleware.py",
      "line_number": 203,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.134318"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Warming job list cache for user: {user_id or 'all'}\")",
      "file_path": "api/services/cache_hooks.py",
      "line_number": 147,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.136294"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Warming stats cache for user: {user_id}\")",
      "file_path": "api/services/cache_hooks.py",
      "line_number": 156,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.136390"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Cache warming failed for user stats: {e}\")",
      "file_path": "api/services/cache_hooks.py",
      "line_number": 158,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.136528"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Dashboard data cache hit for user {user_id}\")",
      "file_path": "api/services/database_optimization_integration.py",
      "line_number": 82,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.137043"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to get dashboard data for user {user_id}: {e}\")",
      "file_path": "api/services/database_optimization_integration.py",
      "line_number": 104,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.137198"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Job search failed for user {user_id}, term '{search_term}': {e}\")",
      "file_path": "api/services/database_optimization_integration.py",
      "line_number": 125,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.137384"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Performance analysis failed: {e}\")",
      "file_path": "api/services/database_optimization_integration.py",
      "line_number": 162,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.137557"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Error sending performance alert: {e}\")",
      "file_path": "api/services/websocket_job_integration.py",
      "line_number": 326,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.138568"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(\"Applied SQLite performance optimizations to new connection\")",
      "file_path": "api/services/enhanced_db_optimizer.py",
      "line_number": 134,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.138896"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Created performance index: {index_sql.split('idx_')[1].split(' ')[0]}\")",
      "file_path": "api/services/enhanced_db_optimizer.py",
      "line_number": 198,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.139089"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to create performance indexes: {e}\")",
      "file_path": "api/services/enhanced_db_optimizer.py",
      "line_number": 207,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.139134"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to analyze query performance: {e}\")",
      "file_path": "api/services/enhanced_db_optimizer.py",
      "line_number": 330,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.139275"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"WebSocket connection added: {connection_id} (user: {user_id}, job: {job_id})\")",
      "file_path": "api/services/enhanced_websocket_service.py",
      "line_number": 122,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.140374"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Initialized upload session {session_id} for user {user_id}\")",
      "file_path": "api/services/chunked_upload_service.py",
      "line_number": 364,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.142058"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(\"Created default admin user (username: admin, password: admin123)\")",
      "file_path": "api/services/users.py",
      "line_number": 37,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.142744"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(\"Admin user already exists\")",
      "file_path": "api/services/users.py",
      "line_number": 39,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.142861"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to ensure default admin user: {e}\")",
      "file_path": "api/services/users.py",
      "line_number": 44,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.142898"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Admin bulk action '{request.action}' completed on {len(request.session_ids)} sessions\")",
      "file_path": "api/routes/admin_chunked_uploads.py",
      "line_number": 338,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.143356"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to perform bulk actions: {e}\")",
      "file_path": "api/routes/admin_chunked_uploads.py",
      "line_number": 342,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.143505"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to get performance stats: {e}\")",
      "file_path": "api/routes/admin_chunked_uploads.py",
      "line_number": 398,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.143730"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Error in WebSocket user notifications loop: {e}\")",
      "file_path": "api/routes/websockets.py",
      "line_number": 171,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.144448"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"WebSocket user notifications error: {e}\")",
      "file_path": "api/routes/websockets.py",
      "line_number": 175,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.144591"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.warning(f\"Invalid JSON message from connection {connection_id}: {message}\")",
      "file_path": "api/routes/websockets.py",
      "line_number": 340,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.145132"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.warning(f\"Invalid JSON admin message from connection {connection_id}: {message}\")",
      "file_path": "api/routes/websockets.py",
      "line_number": 387,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.145454"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Admin {current_user['username']} cancelled job {job_id}\")",
      "file_path": "api/routes/admin.py",
      "line_number": 238,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.147111"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Admin {current_user['username']} deleted job {job_id}\")",
      "file_path": "api/routes/admin.py",
      "line_number": 284,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.147256"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Admin {current_user['username']} cleaned up {deleted_count} old jobs\")",
      "file_path": "api/routes/admin.py",
      "line_number": 332,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.147336"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to get performance metrics: {e}\")",
      "file_path": "api/routes/admin.py",
      "line_number": 687,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.147693"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to get performance analysis: {e}\")",
      "file_path": "api/routes/admin_websocket.py",
      "line_number": 312,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.148995"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"WebSocket connected for upload session {session_id} (user: {user_id})\")",
      "file_path": "api/routes/upload_websockets.py",
      "line_number": 75,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.150646"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"User upload notifications WebSocket connected for user {user_id}\")",
      "file_path": "api/routes/upload_websockets.py",
      "line_number": 145,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.150839"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Error in user upload notifications WebSocket: {e}\")",
      "file_path": "api/routes/upload_websockets.py",
      "line_number": 179,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.150948"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"User upload notifications WebSocket disconnected for user {user_id}\")",
      "file_path": "api/routes/upload_websockets.py",
      "line_number": 182,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.150985"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"User upload notifications WebSocket error for user {user_id}: {e}\")",
      "file_path": "api/routes/upload_websockets.py",
      "line_number": 184,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.151014"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Initialized upload session for user {user_id}: {request.filename}\")",
      "file_path": "api/routes/chunked_uploads.py",
      "line_number": 83,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.151726"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to list user uploads: {e}\")",
      "file_path": "api/routes/chunked_uploads.py",
      "line_number": 252,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.151987"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to get performance analysis: {e}\")",
      "file_path": "api/routes/admin_database_optimization.py",
      "line_number": 73,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.152266"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.error(f\"Failed to calculate performance grade: {e}\")",
      "file_path": "api/routes/admin_database_optimization.py",
      "line_number": 424,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.152705"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: formatter = logging.Formatter(",
      "file_path": "api/utils/logger.py",
      "line_number": 33,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.152957"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Thread {thread_id} requesting lock for: {operation}\")",
      "file_path": "api/utils/db_lock.py",
      "line_number": 23,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.153108"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.warning(f\"Rate limit exceeded for {client_ip}: {request_count}/{self.config.max_requests} requests\")",
      "file_path": "api/middlewares/rate_limit.py",
      "line_number": 78,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.153895"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: access_logger.warning(json.dumps(log_data))",
      "file_path": "api/middlewares/access_log.py",
      "line_number": 56,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.154095"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: access_logger.info(json.dumps(log_data))",
      "file_path": "api/middlewares/access_log.py",
      "line_number": 58,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.154142"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Cache hit for {request.url.path}\")",
      "file_path": "api/middlewares/api_cache.py",
      "line_number": 88,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.154313"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Cache hit for {request.url.path} (key: {cache_key[:8]}...)\")",
      "file_path": "api/middlewares/enhanced_cache.py",
      "line_number": 165,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.154572"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.debug(f\"Cache stored for {request.url.path} (key: {cache_key[:8]}...)\")",
      "file_path": "api/middlewares/enhanced_cache.py",
      "line_number": 200,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.154669"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.warning(f\"Failed to cache response for {request.url.path}\")",
      "file_path": "api/middlewares/enhanced_cache.py",
      "line_number": 202,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.154701"
    },
    {
      "severity": "MEDIUM",
      "category": "Log Injection",
      "title": "Potential log injection vulnerability",
      "description": "User input in logging without sanitization: logger.info(f\"Invalidated cache for user {user_id}\")",
      "file_path": "api/middlewares/enhanced_cache.py",
      "line_number": 251,
      "recommendation": "Sanitize user input before logging or use structured logging",
      "timestamp": "2025-10-21T10:03:38.154771"
    },
    {
      "severity": "MEDIUM",
      "category": "Configuration",
      "title": "Weak secret in configuration",
      "description": "Short secret value detected in .env",
      "file_path": ".env",
      "line_number": 23,
      "recommendation": "Use strong, randomly generated secrets (16+ characters)",
      "timestamp": "2025-10-21T10:03:38.323374"
    },
    {
      "severity": "MEDIUM",
      "category": "Configuration",
      "title": "Weak secret in configuration",
      "description": "Short secret value detected in .env",
      "file_path": ".env",
      "line_number": 25,
      "recommendation": "Use strong, randomly generated secrets (16+ characters)",
      "timestamp": "2025-10-21T10:03:38.323505"
    }
  ],
  "recommendations": [
    "PRIORITY 1: Fix all CRITICAL security vulnerabilities immediately",
    "PRIORITY 2: Address HIGH severity security issues",
    "Implement parameterized queries and prepared statements",
    "Strengthen authentication security (bcrypt, JWT expiration, secrets)",
    "Implement comprehensive file upload validation"
  ]
}